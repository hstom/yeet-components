{"version":3,"sources":["webpack:///../src/YBasic/YSelect/YSelect.js?9773","webpack:///../YSelect.mdx","webpack:///../src/YBasic/YSelect/subcomponents/YSelectDisplay.js","webpack:///../src/YBasic/YSelect/subcomponents/YSelectSVGs.js","webpack:///../src/YBasic/YSelect/subcomponents/YSelectIndicator.js","webpack:///../src/YBasic/YSelect/subcomponents/YSelectMenu.js","webpack:///../src/YBasic/YSelect/YSelect.js","webpack:///../src/YBasic/YSelect/UncontrolledYSelect.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","UncontrolledYSelect","SourceDisplay","source","clearable","placeholder","searchable","noIndicators","options","Array","fill","map","_","i","value","label","onChange","alert","isMDXComponent","genSubcomponent","getGenericThemableSubcomponentBuilder","globalTheme","DisplayContainer","DisplayPlaceholder","DisplaySingleValue","DisplayInputWrapper","DisplayInputStage","DisplayInput","Tag","forwardRef","YSelectDisplayComponent","yPlaceholder","ySingleValue","yInputWrapper","yInputStage","yInput","yChild","menuOpen","toggleMenu","selected","tabindex","searchString","forwardedRef","onKeyDown","rest","onClick","Object","o","autoCapitalize","autoComplete","autoCorrect","spellCheck","tabIndex","type","aria-autocomplete","ref","onFocus","e","style","opacity","YSelectDisplay","clearablePath","dropdownPath","IndicatorContainer","IndicatorSeparator","IndicatorClearable","IndicatorClearableSVG","propMutator","height","width","viewBox","focusable","children","d","IndicatorDropdown","IndicatorDropdownSVG","YSelectIndicator","yClearable","yClearableSVG","ySeparator","yDropdown","yDropdownSVG","clearSelection","aria-label","YSelectMenuOption","Menu","MenuList","MenuEmpty","YSelectMenuComponent","yList","yEmpty","menuOptions","YSelectMenu","YSelectComponent","yWrapper","yDisplay","yIndicators","yMenu","yOption","Wrapper","useMemo","Stage","useState","setMenuOpen","setSearchString","kbIndex","setKbIndex","wrapperRef","useRef","inputRef","closeMenu","useClickOutsideHandler","useCallback","filteredOptions","scrollBack","node","lastKeyTime","Date","onArrow","eKey","keyTime","nextIndex","setTimeout","console","keyHandlers","ArrowDown","ArrowUp","Enter","selectedValue","Escape","className","data-value","key","YSelect","UncontrolledYSelectComponent","setSelected","useImperativeHandle","v","React"],"mappings":"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","file":"component---y-select-mdx-f50d904e081ef251ae4f.js","sourcesContent":["export default \"import React, { useState, useRef, useMemo, useCallback } from 'react';\\nimport {getGenericThemableSubcomponentBuilder, useClickOutsideHandler} from '../../util.js';\\nimport {YSelectDisplay} from './subcomponents/YSelectDisplay.js';\\nimport {YSelectIndicator} from './subcomponents/YSelectIndicator.js';\\nimport {YSelectMenu, YSelectMenuOption} from './subcomponents/YSelectMenu.js';\\nimport './YSelectComponents.css';\\n\\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\\n\\n/**\\n * TODO LIST:\\n * close menu on input ref blur\\n */\\n\\nconst YSelectComponent = ({\\n    yWrapper={},\\n    yDisplay={},\\n    yIndicators={},\\n    yMenu: {yOption, ...yMenu}={},\\n    \\n    options = [],\\n    placeholder = 'Select...',\\n    clearable = true,\\n    searchable = true,\\n    noIndicators = false,\\n    selected,\\n    onChange,\\n    forwardedRef,\\n    ...rest\\n}) => {\\n\\n    const Wrapper = useMemo(() => genSubcomponent('', {forwardRef: true}), []);\\n    const Stage = useMemo(() => genSubcomponent('stage'), []);\\n\\n    const [menuOpen, setMenuOpen] = useState(false);\\n    const [searchString, setSearchString] = useState('');\\n    const [kbIndex, setKbIndex] = useState(null);\\n\\n    const wrapperRef = useRef();\\n    const inputRef = useRef();\\n\\n    const closeMenu = () => {\\n        setMenuOpen(false); setSearchString(''); setKbIndex(null);\\n    }\\n\\n    useClickOutsideHandler(wrapperRef, useCallback(() => {\\n        if(menuOpen) {\\n            closeMenu();\\n        }\\n    }, [menuOpen]));\\n\\n    const filteredOptions = useMemo(\\n        () => options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase())),\\n        [searchString, options]\\n    );\\n\\n    const scrollBack = useCallback(node => {\\n        if(node !== null) { // TODO add necessity check\\n            if(node.scrollIntoViewIfNeeded) {\\n                node.scrollIntoViewIfNeeded();\\n            } else {\\n                node.parentNode.scrollTop = node.offsetTop;\\n            }\\n        }\\n    }, []);\\n\\n    const lastKeyTime = useRef(new Date().getTime());\\n\\n    const onArrow = eKey => {\\n        const keyTime = new Date().getTime();\\n        if((keyTime - lastKeyTime.current) > 30) {\\n            let nextIndex = 0;\\n            if(kbIndex !== null){\\n                if(eKey === 'ArrowDown') {\\n                    nextIndex = kbIndex + 1;\\n                }\\n                if(eKey === 'ArrowUp') {\\n                    nextIndex = kbIndex - 1;\\n                }\\n            }\\n            if(nextIndex < 0) {\\n                nextIndex = filteredOptions.length - 1;\\n            }\\n            if(nextIndex >= filteredOptions.length) {\\n                nextIndex = 0;\\n            }\\n            if(kbIndex !== nextIndex){\\n                setTimeout(() => setKbIndex(nextIndex), 0);\\n            }\\n            lastKeyTime.current = keyTime;\\n        } else {\\n            console.log('skipped'); // remove throttler?\\n        }\\n    }\\n    const keyHandlers = {\\n        ArrowDown: onArrow,\\n        ArrowUp: onArrow,\\n        Enter: () => {\\n            if(kbIndex !== null && kbIndex >= 0 && kbIndex < filteredOptions.length) {\\n                const selectedValue = filteredOptions[kbIndex].value;\\n                closeMenu();\\n                onChange(selectedValue);\\n                inputRef.current && inputRef.current.blur();\\n            } else {\\n                setKbIndex(0);\\n            }\\n        },\\n        Escape: () => {\\n            closeMenu();\\n        }\\n    }\\n    const onInputKeyDown = e => {\\n        const eKey = e.key;\\n        if(keyHandlers[eKey]) {\\n            keyHandlers[eKey](eKey);\\n            e.preventDefault();\\n        }\\n    }\\n\\n    const toggleMenu = () => {\\n        if(menuOpen) {\\n            closeMenu();\\n        } else {\\n            setMenuOpen(true);\\n            inputRef.current && inputRef.current.focus();\\n        }\\n    }\\n\\n    const clearSelection = useCallback(() => {\\n        const wasNull = selected === null;\\n        if(!wasNull) {\\n            onChange(null);\\n        }\\n    }, [selected, onChange]);\\n\\n    const onSearchStringChange = e => setSearchString(e.target.value);\\n\\n    const menuOptions = useMemo(() => filteredOptions  // TODO memoize\\n        .map(({value, label}, i) => (\\n            <YSelectMenuOption // TODO replace with React.memo\\n                {...yOption}\\n                className={(value === selected ? 'selected' : '') + (i === kbIndex ? ' highlighted' : '')}\\n                data-value={value} // I'm here for dev tool visibility\\n                onClick={() => {closeMenu(); selected !== value && onChange(value);}}\\n                key={`${value}-${i}`}\\n                {...(\\n                    (selected, highlighted) => {\\n                        if((selected && kbIndex === null) || highlighted) {\\n                            return {ref: scrollBack};\\n                        } else {\\n                            return {}\\n                        }\\n                    })(value === selected, i === kbIndex)\\n                }\\n            >\\n                {label}\\n            </YSelectMenuOption>)), [filteredOptions, kbIndex, onChange, selected, yOption, scrollBack]);\\n\\n    return (\\n        <Wrapper {...yWrapper} ref={wrapperRef}>\\n            <Stage {...rest}>\\n                <YSelectDisplay\\n                    {...yDisplay}\\n                    menuOpen={menuOpen}\\n                    toggleMenu={toggleMenu}\\n                    selected={selected}\\n                    options={options}\\n                    placeholder={placeholder}\\n                    searchable={searchable}\\n                    onChange={onSearchStringChange}\\n                    onKeyDown={onInputKeyDown}\\n                    searchString={searchString}\\n                    ref={inputRef}\\n                />\\n                {!noIndicators && <YSelectIndicator\\n                    {...yIndicators}\\n                    selected={selected}\\n                    clearable={clearable}\\n                    clearSelection={clearSelection}\\n                    toggleMenu={toggleMenu}\\n                />}\\n            </Stage>\\n            <YSelectMenu\\n                {...yMenu}\\n                menuOpen={menuOpen}\\n                menuOptions={menuOptions}\\n                options={options}\\n            />\\n        </Wrapper>);\\n\\n}\\nYSelectComponent.displayName = 'YSelect';\\nexport const YSelect = YSelectComponent;\\n\\nexport default YSelect;\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport UncontrolledYSelect from './src/YBasic/YSelect/UncontrolledYSelect.js';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/YBasic/YSelect/YSelect.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Quality: Sophistication`}</p>\n    <h1 {...{\n      \"id\": \"yselectcomponents\"\n    }}>{`YSelectComponents`}</h1>\n    <h2 {...{\n      \"id\": \"single-select\"\n    }}>{`Single Select`}</h2>\n    <p>{`i work with the keyboard too`}</p>\n    <Playground __position={0} __code={'<UncontrolledYSelect\\n  clearable={true || \\'default\\'}\\n  placeholder={\\'Select...\\' || \\'default\\'}\\n  searchable={true || \\'default\\'}\\n  noIndicators={false && \\'default\\'}\\n  options={Array(100) // array of {value, label}\\n    .fill()\\n    .map((_, i) => ({\\n      value: i,\\n      label: `${i % 2 == 0 ? \\'B\\' : \\'Z\\'}${(i * 7) % 3 == 0 ? \\'ee\\' : \\'oo\\'}${\\n        i % 3 == 0 ? \\'p\\' : i % 3 == 1 ? \\'m\\' : \\'k\\'\\n      }`,\\n    }))}\\n  onChange={\\n    value => alert(`Id ${value} selected!`)\\n    //() => {} // disable alert\\n  }\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      UncontrolledYSelect,\n      SourceDisplay,\n      source\n    }} mdxType=\"Playground\">\n      <UncontrolledYSelect clearable={true || 'default'} placeholder={'Select...' || 'default'} searchable={true || 'default'} noIndicators={false && 'default'} options={Array(100) // array of {value, label}\n      .fill().map((_, i) => ({\n        value: i,\n        label: `${i % 2 == 0 ? 'B' : 'Z'}${i * 7 % 3 == 0 ? 'ee' : 'oo'}${i % 3 == 0 ? 'p' : i % 3 == 1 ? 'm' : 'k'}`\n      }))} onChange={value => alert(`Id ${value} selected!`) //() => {} // disable alert\n      } mdxType=\"UncontrolledYSelect\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../../util.js';\n// import { clearablePath } from './YSelectSVGs.js';\nimport '../YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select display', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n// export const ThemableYSelectMultiValueButton = genSubcomponent('multi button');\n// export const ThemableYSelectMultiValueLabel = genSubcomponent('multi button label');\n// export const ThemableYSelectMultiValueRemove = genSubcomponent('multi button remove');\n// export const ThemableYSelectMultiValueRemoveSVG = genSubcomponent('multi button remove svg', {\n//     Tag: 'svg',\n//     propMutator: () => ({\n//         height: '20px',\n//         width: '20px',\n//         viewBox: '0 0 20 20',\n//         'aria-hidden': true,\n//         focusable: false,\n//         children: <path d={clearablePath}></path>\n//     })\n// });\n\nconst DisplayContainer = genSubcomponent('container');\nconst DisplayPlaceholder = genSubcomponent('placeholder');\nconst DisplaySingleValue = genSubcomponent('single value');\n\nconst DisplayInputWrapper = genSubcomponent('input wrapper');\nconst DisplayInputStage = genSubcomponent('input stage');\nconst DisplayInput = genSubcomponent('input', {Tag: 'input', forwardRef: true});\n\nconst YSelectDisplayComponent = ({\n    yPlaceholder={},\n    ySingleValue={},\n    yInputWrapper={},\n    yInputStage={},\n    yInput={},\n    yChild={},\n\n\n    menuOpen,\n    toggleMenu,\n    selected,\n    options,\n    placeholder,\n    searchable,\n    tabindex = \"0\",\n    searchString,\n    forwardedRef,\n    onChange,\n    onKeyDown,\n    ...rest\n}) => (<DisplayContainer\n    onClick={toggleMenu}\n    {...rest}\n>\n    {/* <MultiValueButton>\n        <MultiValueLabel>\n            Goofy\n        </MultiValueLabel>\n        <MultiValueRemove>\n            <MultiValueRemoveSVG/>\n        </MultiValueRemove>\n    </MultiValueButton> */}\n    {!(searchable && menuOpen) &&\n        (selected == null\n        ? <DisplayPlaceholder\n            {...Object.assign({}, yChild, yPlaceholder)}\n        >\n            {placeholder}\n        </DisplayPlaceholder>\n        : <DisplaySingleValue\n            {...Object.assign({}, yChild, ySingleValue)}\n        >\n            {options.filter(o => o.value === selected)[0].label}\n        </DisplaySingleValue>\n    )}\n    <DisplayInputWrapper\n        {...yInputWrapper}\n    > \n        <DisplayInputStage\n            {...yInputStage}\n        >\n            <DisplayInput\n                {...yInput}\n                autoCapitalize='none'\n                autoComplete='off'\n                autoCorrect='off'\n                spellCheck='false'\n                tabIndex={tabindex}\n                type='text'\n                aria-autocomplete='list'\n                value={searchString}\n                ref={forwardedRef}\n                onChange={onChange}\n                onKeyDown={onKeyDown}\n                onFocus={() => {\n                    if(!menuOpen) {\n                        toggleMenu();\n                    }\n                }} \n                onClick={(e) => {e.stopPropagation(); return false;}}\n                style={{opacity: (searchable && menuOpen) ? '1' : '0'}}\n            ></DisplayInput>\n        </DisplayInputStage>\n    </DisplayInputWrapper>\n</DisplayContainer>);\n\nYSelectDisplayComponent.displayName = 'YSelectDisplayContainer';\nexport const YSelectDisplay = React.forwardRef((props, ref) => {\n    return <YSelectDisplayComponent {...props} forwardedRef={ref} />;\n});\n\nexport default YSelectDisplay;","export const clearablePath = \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\";\nexport const dropdownPath = \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\";","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../../util.js';\nimport { clearablePath, dropdownPath } from './YSelectSVGs.js';\nimport '../YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select indicator', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nconst IndicatorContainer = genSubcomponent('container');\nconst IndicatorSeparator = genSubcomponent('separator');\nconst IndicatorClearable = genSubcomponent('clearable', {Tag: 'button'});\nconst IndicatorClearableSVG = genSubcomponent('clearable svg', {\n    Tag: 'svg',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={clearablePath}></path>\n    })\n});\nconst IndicatorDropdown = genSubcomponent('dropdown', {Tag: 'button'});\nconst IndicatorDropdownSVG = genSubcomponent('dropdown svg', {\n    Tag: 'svg',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={dropdownPath}></path>\n    })\n});\n\nexport const YSelectIndicator = ({\n    yClearable={},\n    yClearableSVG={},\n    ySeparator={},\n    yDropdown={},\n    yDropdownSVG={},\n\n    selected,\n    clearable,\n    clearSelection,\n    toggleMenu,\n    ...rest\n}) => (<IndicatorContainer {...rest}>\n    {clearable && (selected !== null) && <IndicatorClearable\n        {...yClearable}\n        onClick={clearSelection}\n        aria-label='clear selection'\n    >\n        <IndicatorClearableSVG {...yClearableSVG}/>\n    </IndicatorClearable>\n    }\n    <IndicatorSeparator {...ySeparator}/>\n    <IndicatorDropdown {...yDropdown} onClick={toggleMenu} aria-label='open menu'>\n        <IndicatorDropdownSVG {...yDropdownSVG}/>\n    </IndicatorDropdown>\n</IndicatorContainer>);\n\nexport default YSelectIndicator;","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../../util.js';\nimport '../YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select menu', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const YSelectMenuOption = genSubcomponent('option', {forwardRef: true});\n\nconst Menu = genSubcomponent();\nconst MenuList = genSubcomponent('list');\nconst MenuEmpty = genSubcomponent('empty');\n\nconst YSelectMenuComponent = ({\n    yList={},\n    yEmpty={},\n\n    menuOpen,\n    menuOptions,\n    options,\n    ...rest\n}) => (menuOpen && <Menu {...rest}>\n    <MenuList {...yList}>\n        {\n            menuOptions.length\n                ? menuOptions\n                : <MenuEmpty {...yEmpty}>{options.length ? 'No options match' : 'No options'}</MenuEmpty>\n        }\n    </MenuList>\n</Menu>);\n\nYSelectMenuComponent.displayName = 'YSelectMenuComponent';\nexport const YSelectMenu = YSelectMenuComponent;\n\nexport default YSelectMenu;","import React, { useState, useRef, useMemo, useCallback } from 'react';\nimport {getGenericThemableSubcomponentBuilder, useClickOutsideHandler} from '../../util.js';\nimport {YSelectDisplay} from './subcomponents/YSelectDisplay.js';\nimport {YSelectIndicator} from './subcomponents/YSelectIndicator.js';\nimport {YSelectMenu, YSelectMenuOption} from './subcomponents/YSelectMenu.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n/**\n * TODO LIST:\n * close menu on input ref blur\n */\n\nconst YSelectComponent = ({\n    yWrapper={},\n    yDisplay={},\n    yIndicators={},\n    yMenu: {yOption, ...yMenu}={},\n    \n    options = [],\n    placeholder = 'Select...',\n    clearable = true,\n    searchable = true,\n    noIndicators = false,\n    selected,\n    onChange,\n    forwardedRef,\n    ...rest\n}) => {\n\n    const Wrapper = useMemo(() => genSubcomponent('', {forwardRef: true}), []);\n    const Stage = useMemo(() => genSubcomponent('stage'), []);\n\n    const [menuOpen, setMenuOpen] = useState(false);\n    const [searchString, setSearchString] = useState('');\n    const [kbIndex, setKbIndex] = useState(null);\n\n    const wrapperRef = useRef();\n    const inputRef = useRef();\n\n    const closeMenu = () => {\n        setMenuOpen(false); setSearchString(''); setKbIndex(null);\n    }\n\n    useClickOutsideHandler(wrapperRef, useCallback(() => {\n        if(menuOpen) {\n            closeMenu();\n        }\n    }, [menuOpen]));\n\n    const filteredOptions = useMemo(\n        () => options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase())),\n        [searchString, options]\n    );\n\n    const scrollBack = useCallback(node => {\n        if(node !== null) { // TODO add necessity check\n            if(node.scrollIntoViewIfNeeded) {\n                node.scrollIntoViewIfNeeded();\n            } else {\n                node.parentNode.scrollTop = node.offsetTop;\n            }\n        }\n    }, []);\n\n    const lastKeyTime = useRef(new Date().getTime());\n\n    const onArrow = eKey => {\n        const keyTime = new Date().getTime();\n        if((keyTime - lastKeyTime.current) > 30) {\n            let nextIndex = 0;\n            if(kbIndex !== null){\n                if(eKey === 'ArrowDown') {\n                    nextIndex = kbIndex + 1;\n                }\n                if(eKey === 'ArrowUp') {\n                    nextIndex = kbIndex - 1;\n                }\n            }\n            if(nextIndex < 0) {\n                nextIndex = filteredOptions.length - 1;\n            }\n            if(nextIndex >= filteredOptions.length) {\n                nextIndex = 0;\n            }\n            if(kbIndex !== nextIndex){\n                setTimeout(() => setKbIndex(nextIndex), 0);\n            }\n            lastKeyTime.current = keyTime;\n        } else {\n            console.log('skipped'); // remove throttler?\n        }\n    }\n    const keyHandlers = {\n        ArrowDown: onArrow,\n        ArrowUp: onArrow,\n        Enter: () => {\n            if(kbIndex !== null && kbIndex >= 0 && kbIndex < filteredOptions.length) {\n                const selectedValue = filteredOptions[kbIndex].value;\n                closeMenu();\n                onChange(selectedValue);\n                inputRef.current && inputRef.current.blur();\n            } else {\n                setKbIndex(0);\n            }\n        },\n        Escape: () => {\n            closeMenu();\n        }\n    }\n    const onInputKeyDown = e => {\n        const eKey = e.key;\n        if(keyHandlers[eKey]) {\n            keyHandlers[eKey](eKey);\n            e.preventDefault();\n        }\n    }\n\n    const toggleMenu = () => {\n        if(menuOpen) {\n            closeMenu();\n        } else {\n            setMenuOpen(true);\n            inputRef.current && inputRef.current.focus();\n        }\n    }\n\n    const clearSelection = useCallback(() => {\n        const wasNull = selected === null;\n        if(!wasNull) {\n            onChange(null);\n        }\n    }, [selected, onChange]);\n\n    const onSearchStringChange = e => setSearchString(e.target.value);\n\n    const menuOptions = useMemo(() => filteredOptions  // TODO memoize\n        .map(({value, label}, i) => (\n            <YSelectMenuOption // TODO replace with React.memo\n                {...yOption}\n                className={(value === selected ? 'selected' : '') + (i === kbIndex ? ' highlighted' : '')}\n                data-value={value} // I'm here for dev tool visibility\n                onClick={() => {closeMenu(); selected !== value && onChange(value);}}\n                key={`${value}-${i}`}\n                {...(\n                    (selected, highlighted) => {\n                        if((selected && kbIndex === null) || highlighted) {\n                            return {ref: scrollBack};\n                        } else {\n                            return {}\n                        }\n                    })(value === selected, i === kbIndex)\n                }\n            >\n                {label}\n            </YSelectMenuOption>)), [filteredOptions, kbIndex, onChange, selected, yOption, scrollBack]);\n\n    return (\n        <Wrapper {...yWrapper} ref={wrapperRef}>\n            <Stage {...rest}>\n                <YSelectDisplay\n                    {...yDisplay}\n                    menuOpen={menuOpen}\n                    toggleMenu={toggleMenu}\n                    selected={selected}\n                    options={options}\n                    placeholder={placeholder}\n                    searchable={searchable}\n                    onChange={onSearchStringChange}\n                    onKeyDown={onInputKeyDown}\n                    searchString={searchString}\n                    ref={inputRef}\n                />\n                {!noIndicators && <YSelectIndicator\n                    {...yIndicators}\n                    selected={selected}\n                    clearable={clearable}\n                    clearSelection={clearSelection}\n                    toggleMenu={toggleMenu}\n                />}\n            </Stage>\n            <YSelectMenu\n                {...yMenu}\n                menuOpen={menuOpen}\n                menuOptions={menuOptions}\n                options={options}\n            />\n        </Wrapper>);\n\n}\nYSelectComponent.displayName = 'YSelect';\nexport const YSelect = YSelectComponent;\n\nexport default YSelect;","import React, {useState, useImperativeHandle} from 'react';\nimport {YSelect} from './YSelect.js';\n\n/**\n * This is only used to demo handling the state above the YSelect in YSelect.mdx\n */\nconst UncontrolledYSelectComponent = ({onChange, ...props}, ref) => {\n    const [selected, setSelected] = useState(null);\n    useImperativeHandle(ref, () => ({\n        value: selected\n    }), [selected]);\n\n    const onChangeHook = v => {\n        setSelected(v);\n        onChange(v);\n    };\n\n    return (<YSelect\n        selected={selected}\n        onChange={onChangeHook}\n        {...props}\n    />);\n}\nUncontrolledYSelectComponent.displayName = 'UncontrolledYSelect';\nexport const UncontrolledYSelect =  React.forwardRef(UncontrolledYSelectComponent);\n\nexport default UncontrolledYSelect;"],"sourceRoot":""}