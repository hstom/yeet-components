{"version":3,"sources":["webpack:///../src/YBasic/YSelectComponents/YSelectComponents.js","webpack:///../src/YBasic/YSelectComponents/YSelectComponents.js?0555","webpack:///../YSelectComponents.mdx"],"names":["ThemableYSelectWrapper","buildGenericThemableComponent","Tag","componentClassName","themeSelector","globalTheme","displayName","forwardRef","ThemableYSelectStage","ThemableYSelectValueContainer","ThemableYSelectMultiValueButton","ThemableYSelectMultiValueLabel","ThemableYSelectMultiValueRemove","clearablePath","ThemableYSelectMultiValueRemoveSVG","propMutator","height","width","viewBox","focusable","children","d","ThemableYSelectValuePlaceholder","ThemableYSelectValueSingleValue","ThemableYSelectIndicatorContainer","ThemableYSelectIndicatorSeparator","ThemableYSelectIndicatorClearable","ThemableYSelectIndicatorClearableSVG","ThemableYSelectIndicatorDropdown","ThemableYSelectIndicatorDropdownSVG","ThemableYSelectMenu","ThemableYSelectMenuList","ThemableYSelectMenuOption","ThemableYSelect","Wrapper","Stage","ValueContainer","ValuePlaceholder","ValueSingleValue","IndicatorContainer","IndicatorSeparator","IndicatorClearable","IndicatorClearableSVG","IndicatorDropdown","IndicatorDropdownSVG","Menu","MenuList","MenuOption","YSelectComponent","e","menuOpen","rest","Object","selected","value","React","componentDidMount","document","this","componentWillUnmount","render","options","placeholder","clearable","ref","onClick","toggleMenu","state","o","clearSelection","label","className","data-value","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","State","Observe","YSelect","SourceDisplay","source","isMDXComponent"],"mappings":"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","file":"component---y-select-components-mdx-7386e13515533e59f5ad.js","sourcesContent":["import React from 'react';\nimport { buildGenericThemableComponent } from '../../util.js';\nimport './YSelectComponents.css';\n\n/**\n * LAYOUT\n */\nexport const ThemableYSelectWrapper = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-wrapper',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).wrapper || {}),\n    displayName: 'YSelectWrapper',\n    forwardRef: true\n});\n\nexport const ThemableYSelectStage = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-stage',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).stage || {}),\n    displayName: 'YSelectStage'\n});\n\n/**\n * VALUE REGION\n */\n\nexport const ThemableYSelectValueContainer = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-value-container',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueContainer || {}),\n    displayName: 'YSelectValueContainer'\n});\n\nexport const ThemableYSelectMultiValueButton = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-multi-value-button',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueButton || {}),\n    displayName: 'YSelectMutliValueButton'\n});\n\nexport const ThemableYSelectMultiValueLabel = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-multi-value-label',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueLabel || {}),\n    displayName: 'YSelectMutliValueLabel'\n});\n\nexport const ThemableYSelectMultiValueRemove = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-multi-value-remove',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueRemove || {}),\n    displayName: 'YSelectMutliValueRemove'\n});\n\nconst clearablePath = \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\";\n\nexport const ThemableYSelectMultiValueRemoveSVG = buildGenericThemableComponent({\n    Tag: 'svg',\n    componentClassName: 'y-select-multi-value-remove-svg',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueRemoveSVG || {}),\n    displayName: 'YSelectMutliValueRemoveSVG',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={clearablePath}></path>\n    })\n});\n\nexport const ThemableYSelectValuePlaceholder = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-value-placeholder',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valuePlaceholder || {}),\n    displayName: 'YSelectValuePlaceholder'\n});\n\nexport const ThemableYSelectValueSingleValue = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-value-single-value',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueSingleValue || {}),\n    displayName: 'YSelectValueSingleValue'\n});\n\n/**\n * INDICATOR REGION\n */\n\nexport const ThemableYSelectIndicatorContainer = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-indicator-container',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorContainer || {}),\n    displayName: 'YSelectIndicatorContainer'\n});\n\nexport const ThemableYSelectIndicatorSeparator = buildGenericThemableComponent({\n    Tag: 'span',\n    componentClassName: 'y-select-indicator-separator',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorSeparator || {}),\n    displayName: 'YSelectIndicatorSeparator'\n});\n\nexport const ThemableYSelectIndicatorClearable  = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-indicator-clearable',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorClearable || {}),\n    displayName: 'YSelectIndicatorClearable'\n});\n\nexport const ThemableYSelectIndicatorClearableSVG = buildGenericThemableComponent({\n    Tag: 'svg',\n    componentClassName: 'y-select-indicator-dropdown-svg',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorClearableSVG || {}),\n    displayName: 'YSelectIndicatorDropdownSVG',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={clearablePath}></path>\n    })\n});\n\nexport const ThemableYSelectIndicatorDropdown = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-indicator-dropdown',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorDropdown || {}),\n    displayName: 'YSelectIndicatorDropdown'\n});\n\nconst dropdownPath = \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\";\n\nexport const ThemableYSelectIndicatorDropdownSVG = buildGenericThemableComponent({\n    Tag: 'svg',\n    componentClassName: 'y-select-indicator-dropdown-svg',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorDropdownSVG || {}),\n    displayName: 'YSelectIndicatorDropdownSVG',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={dropdownPath}></path>\n    })\n});\n\n/**\n * MENU REGION\n */\n\nexport const ThemableYSelectMenu = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-menu',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menu || {}),\n    displayName: 'YSelectMenu'\n});\n\nexport const ThemableYSelectMenuList = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-menu-list',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuList || {}),\n    displayName: 'YSelectMenuList'\n});\n\nexport const ThemableYSelectMenuOption = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-menu-option',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuOption || {}),\n    displayName: 'YSelectMenuOption'\n});\n\n\nexport const ThemableYSelect = globalTheme => {\n    const Wrapper = ThemableYSelectWrapper(globalTheme);\n    const Stage = ThemableYSelectStage(globalTheme);\n\n    const ValueContainer = ThemableYSelectValueContainer(globalTheme);\n    const MultiValueButton = ThemableYSelectMultiValueButton(globalTheme);\n    const MultiValueLabel = ThemableYSelectMultiValueLabel(globalTheme);\n    const MultiValueRemove = ThemableYSelectMultiValueRemove(globalTheme);\n    const MultiValueRemoveSVG = ThemableYSelectMultiValueRemoveSVG(globalTheme);\n    const ValuePlaceholder = ThemableYSelectValuePlaceholder(globalTheme);\n    const ValueSingleValue = ThemableYSelectValueSingleValue(globalTheme);\n\n\n    const IndicatorContainer = ThemableYSelectIndicatorContainer(globalTheme);\n    const IndicatorSeparator = ThemableYSelectIndicatorSeparator(globalTheme);\n    const IndicatorClearable = ThemableYSelectIndicatorClearable(globalTheme);\n    const IndicatorClearableSVG = ThemableYSelectIndicatorClearableSVG(globalTheme);\n    const IndicatorDropdown = ThemableYSelectIndicatorDropdown(globalTheme);\n    const IndicatorDropdownSVG = ThemableYSelectIndicatorDropdownSVG(globalTheme);\n\n    const Menu = ThemableYSelectMenu(globalTheme);\n    const MenuList = ThemableYSelectMenuList(globalTheme);\n    const MenuOption = ThemableYSelectMenuOption(globalTheme);\n\n    class YSelectComponent extends React.Component {\n        constructor(props) {\n            super(props);\n            this.ref = React.createRef();\n            this.state = {\n                menuOpen: false,\n                selected: null\n            }\n        }\n\n        componentDidMount() {\n            document.addEventListener('mousedown', this.closeOnOutsideClick, false);\n        }\n\n        componentWillUnmount() {\n            document.removeEventListener('mousedown', this.closeOnOutsideClick, false);\n        }\n\n        closeOnOutsideClick = e => {\n            if(this.ref.current && !this.ref.current.contains(e.target) && this.state.menuOpen){\n                this.setState({menuOpen: false});\n            }\n        };\n\n        toggleMenu = () => this.setState(({menuOpen, ...rest}) => Object.assign({}, rest, {menuOpen: !menuOpen}));\n\n        selectMenuOption = (e) => {\n            debugger;\n            this.setState({\n                selected: e.target.dataSet().value\n            });\n        }\n\n        selectableMenuOption = value => () => this.setState({menuOpen: false, selected: value});\n\n        clearSelection = () => this.setState({menuOpen: false, selected: null});\n\n        render() {\n            const {\n                options = [],\n                placeholder = 'Select...',\n                clearable = true\n            } = this.props;\n            return (<Wrapper ref={this.ref}>\n                <Stage>\n                    <ValueContainer onClick={this.toggleMenu}>\n                        {/* <MultiValueButton>\n                            <MultiValueLabel>\n                                Goofy\n                            </MultiValueLabel>\n                            <MultiValueRemove>\n                                <MultiValueRemoveSVG/>\n                            </MultiValueRemove>\n                        </MultiValueButton> */}\n                        {this.state.selected == null\n                            ? <ValuePlaceholder>{placeholder}</ValuePlaceholder>\n                            : <ValueSingleValue>\n                                {options.filter(o => o.value === this.state.selected)[0].label}\n                            </ValueSingleValue>\n                        }\n                    </ValueContainer>\n                    <IndicatorContainer>\n                        {clearable && <IndicatorClearable\n                            onClick={this.clearSelection}\n                        >\n                            <IndicatorClearableSVG/>\n                        </IndicatorClearable>\n                        }\n                        <IndicatorSeparator/>\n                        <IndicatorDropdown onClick={this.toggleMenu}>\n                            <IndicatorDropdownSVG/>\n                        </IndicatorDropdown>\n                    </IndicatorContainer>\n                </Stage>\n                {this.state.menuOpen && <Menu>\n                    <MenuList>\n                        {options.map(({value, label}) => (\n                            <MenuOption \n                                className={value === this.state.selected ? 'selected' : ''}\n                                data-value={value} // I'm here for dev tool visibility\n                                onClick={this.selectableMenuOption(value)}\n                            >\n                                {label}\n                            </MenuOption>))\n                        }\n                    </MenuList>\n                </Menu>}\n            </Wrapper>);\n        }\n    }\n    YSelectComponent.displayName = 'YSelect';\n    return YSelectComponent;\n}\n\nexport default ThemableYSelect();","export default \"import React from 'react';\\nimport { buildGenericThemableComponent } from '../../util.js';\\nimport './YSelectComponents.css';\\n\\n/**\\n * LAYOUT\\n */\\nexport const ThemableYSelectWrapper = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-wrapper',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).wrapper || {}),\\n    displayName: 'YSelectWrapper',\\n    forwardRef: true\\n});\\n\\nexport const ThemableYSelectStage = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-stage',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).stage || {}),\\n    displayName: 'YSelectStage'\\n});\\n\\n/**\\n * VALUE REGION\\n */\\n\\nexport const ThemableYSelectValueContainer = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-value-container',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueContainer || {}),\\n    displayName: 'YSelectValueContainer'\\n});\\n\\nexport const ThemableYSelectMultiValueButton = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-multi-value-button',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueButton || {}),\\n    displayName: 'YSelectMutliValueButton'\\n});\\n\\nexport const ThemableYSelectMultiValueLabel = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-multi-value-label',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueLabel || {}),\\n    displayName: 'YSelectMutliValueLabel'\\n});\\n\\nexport const ThemableYSelectMultiValueRemove = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-multi-value-remove',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueRemove || {}),\\n    displayName: 'YSelectMutliValueRemove'\\n});\\n\\nconst clearablePath = \\\"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\\\";\\n\\nexport const ThemableYSelectMultiValueRemoveSVG = buildGenericThemableComponent({\\n    Tag: 'svg',\\n    componentClassName: 'y-select-multi-value-remove-svg',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueRemoveSVG || {}),\\n    displayName: 'YSelectMutliValueRemoveSVG',\\n    propMutator: () => ({\\n        height: '20px',\\n        width: '20px',\\n        viewBox: '0 0 20 20',\\n        'aria-hidden': true,\\n        focusable: false,\\n        children: <path d={clearablePath}></path>\\n    })\\n});\\n\\nexport const ThemableYSelectValuePlaceholder = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-value-placeholder',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valuePlaceholder || {}),\\n    displayName: 'YSelectValuePlaceholder'\\n});\\n\\nexport const ThemableYSelectValueSingleValue = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-value-single-value',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueSingleValue || {}),\\n    displayName: 'YSelectValueSingleValue'\\n});\\n\\n/**\\n * INDICATOR REGION\\n */\\n\\nexport const ThemableYSelectIndicatorContainer = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-indicator-container',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorContainer || {}),\\n    displayName: 'YSelectIndicatorContainer'\\n});\\n\\nexport const ThemableYSelectIndicatorSeparator = buildGenericThemableComponent({\\n    Tag: 'span',\\n    componentClassName: 'y-select-indicator-separator',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorSeparator || {}),\\n    displayName: 'YSelectIndicatorSeparator'\\n});\\n\\nexport const ThemableYSelectIndicatorClearable  = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-indicator-clearable',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorClearable || {}),\\n    displayName: 'YSelectIndicatorClearable'\\n});\\n\\nexport const ThemableYSelectIndicatorClearableSVG = buildGenericThemableComponent({\\n    Tag: 'svg',\\n    componentClassName: 'y-select-indicator-dropdown-svg',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorClearableSVG || {}),\\n    displayName: 'YSelectIndicatorDropdownSVG',\\n    propMutator: () => ({\\n        height: '20px',\\n        width: '20px',\\n        viewBox: '0 0 20 20',\\n        'aria-hidden': true,\\n        focusable: false,\\n        children: <path d={clearablePath}></path>\\n    })\\n});\\n\\nexport const ThemableYSelectIndicatorDropdown = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-indicator-dropdown',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorDropdown || {}),\\n    displayName: 'YSelectIndicatorDropdown'\\n});\\n\\nconst dropdownPath = \\\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\\\";\\n\\nexport const ThemableYSelectIndicatorDropdownSVG = buildGenericThemableComponent({\\n    Tag: 'svg',\\n    componentClassName: 'y-select-indicator-dropdown-svg',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorDropdownSVG || {}),\\n    displayName: 'YSelectIndicatorDropdownSVG',\\n    propMutator: () => ({\\n        height: '20px',\\n        width: '20px',\\n        viewBox: '0 0 20 20',\\n        'aria-hidden': true,\\n        focusable: false,\\n        children: <path d={dropdownPath}></path>\\n    })\\n});\\n\\n/**\\n * MENU REGION\\n */\\n\\nexport const ThemableYSelectMenu = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-menu',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menu || {}),\\n    displayName: 'YSelectMenu'\\n});\\n\\nexport const ThemableYSelectMenuList = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-menu-list',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuList || {}),\\n    displayName: 'YSelectMenuList'\\n});\\n\\nexport const ThemableYSelectMenuOption = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-menu-option',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuOption || {}),\\n    displayName: 'YSelectMenuOption'\\n});\\n\\n\\nexport const ThemableYSelect = globalTheme => {\\n    const Wrapper = ThemableYSelectWrapper(globalTheme);\\n    const Stage = ThemableYSelectStage(globalTheme);\\n\\n    const ValueContainer = ThemableYSelectValueContainer(globalTheme);\\n    const MultiValueButton = ThemableYSelectMultiValueButton(globalTheme);\\n    const MultiValueLabel = ThemableYSelectMultiValueLabel(globalTheme);\\n    const MultiValueRemove = ThemableYSelectMultiValueRemove(globalTheme);\\n    const MultiValueRemoveSVG = ThemableYSelectMultiValueRemoveSVG(globalTheme);\\n    const ValuePlaceholder = ThemableYSelectValuePlaceholder(globalTheme);\\n    const ValueSingleValue = ThemableYSelectValueSingleValue(globalTheme);\\n\\n\\n    const IndicatorContainer = ThemableYSelectIndicatorContainer(globalTheme);\\n    const IndicatorSeparator = ThemableYSelectIndicatorSeparator(globalTheme);\\n    const IndicatorClearable = ThemableYSelectIndicatorClearable(globalTheme);\\n    const IndicatorClearableSVG = ThemableYSelectIndicatorClearableSVG(globalTheme);\\n    const IndicatorDropdown = ThemableYSelectIndicatorDropdown(globalTheme);\\n    const IndicatorDropdownSVG = ThemableYSelectIndicatorDropdownSVG(globalTheme);\\n\\n    const Menu = ThemableYSelectMenu(globalTheme);\\n    const MenuList = ThemableYSelectMenuList(globalTheme);\\n    const MenuOption = ThemableYSelectMenuOption(globalTheme);\\n\\n    class YSelectComponent extends React.Component {\\n        constructor(props) {\\n            super(props);\\n            this.ref = React.createRef();\\n            this.state = {\\n                menuOpen: false,\\n                selected: null\\n            }\\n        }\\n\\n        componentDidMount() {\\n            document.addEventListener('mousedown', this.closeOnOutsideClick, false);\\n        }\\n\\n        componentWillUnmount() {\\n            document.removeEventListener('mousedown', this.closeOnOutsideClick, false);\\n        }\\n\\n        closeOnOutsideClick = e => {\\n            if(this.ref.current && !this.ref.current.contains(e.target) && this.state.menuOpen){\\n                this.setState({menuOpen: false});\\n            }\\n        };\\n\\n        toggleMenu = () => this.setState(({menuOpen, ...rest}) => Object.assign({}, rest, {menuOpen: !menuOpen}));\\n\\n        selectMenuOption = (e) => {\\n            debugger;\\n            this.setState({\\n                selected: e.target.dataSet().value\\n            });\\n        }\\n\\n        selectableMenuOption = value => () => this.setState({menuOpen: false, selected: value});\\n\\n        clearSelection = () => this.setState({menuOpen: false, selected: null});\\n\\n        render() {\\n            const {\\n                options = [],\\n                placeholder = 'Select...',\\n                clearable = true\\n            } = this.props;\\n            return (<Wrapper ref={this.ref}>\\n                <Stage>\\n                    <ValueContainer onClick={this.toggleMenu}>\\n                        {/* <MultiValueButton>\\n                            <MultiValueLabel>\\n                                Goofy\\n                            </MultiValueLabel>\\n                            <MultiValueRemove>\\n                                <MultiValueRemoveSVG/>\\n                            </MultiValueRemove>\\n                        </MultiValueButton> */}\\n                        {this.state.selected == null\\n                            ? <ValuePlaceholder>{placeholder}</ValuePlaceholder>\\n                            : <ValueSingleValue>\\n                                {options.filter(o => o.value === this.state.selected)[0].label}\\n                            </ValueSingleValue>\\n                        }\\n                    </ValueContainer>\\n                    <IndicatorContainer>\\n                        {clearable && <IndicatorClearable\\n                            onClick={this.clearSelection}\\n                        >\\n                            <IndicatorClearableSVG/>\\n                        </IndicatorClearable>\\n                        }\\n                        <IndicatorSeparator/>\\n                        <IndicatorDropdown onClick={this.toggleMenu}>\\n                            <IndicatorDropdownSVG/>\\n                        </IndicatorDropdown>\\n                    </IndicatorContainer>\\n                </Stage>\\n                {this.state.menuOpen && <Menu>\\n                    <MenuList>\\n                        {options.map(({value, label}) => (\\n                            <MenuOption \\n                                className={value === this.state.selected ? 'selected' : ''}\\n                                data-value={value} // I'm here for dev tool visibility\\n                                onClick={this.selectableMenuOption(value)}\\n                            >\\n                                {label}\\n                            </MenuOption>))\\n                        }\\n                    </MenuList>\\n                </Menu>}\\n            </Wrapper>);\\n        }\\n    }\\n    YSelectComponent.displayName = 'YSelect';\\n    return YSelectComponent;\\n}\\n\\nexport default ThemableYSelect();\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { State, Observe } from \"mdx-observable\";\nimport YSelect from './src/YBasic/YSelectComponents/YSelectComponents.js';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/YBasic/YSelectComponents/YSelectComponents.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"yselectcomponents\"\n    }}>{`YSelectComponents`}</h1>\n    <Playground __position={0} __code={'<YSelect\\n  clearable={true || \\'default\\'}\\n  placeholder={\\'Select...\\' || \\'default\\'}\\n  options={[{ value: \\'1\\', label: \\'BEEP\\' }, { value: \\'2\\', label: \\'BOOP\\' }]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      State,\n      Observe,\n      YSelect,\n      SourceDisplay,\n      source\n    }} mdxType=\"Playground\">\n      <YSelect clearable={true || 'default'} placeholder={'Select...' || 'default'} options={[{\n        value: '1',\n        label: 'BEEP'\n      }, {\n        value: '2',\n        label: 'BOOP'\n      }]} mdxType=\"YSelect\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}