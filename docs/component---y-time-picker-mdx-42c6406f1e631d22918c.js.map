{"version":3,"sources":["webpack:///../src/YBasic/YTimePicker/YTimePicker.js","webpack:///../src/YBasic/YTimePicker/YTimePicker.js?089c","webpack:///../YTimePicker.mdx","webpack:///../src/YBasic/YSelect/YSelectValueContainer.js","webpack:///../src/YBasic/YSelect/YSelectSVGs.js","webpack:///../src/YBasic/YSelect/YSelectIndicatorContainer.js","webpack:///../src/YBasic/YSelect/YSelectMenuContainer.js","webpack:///../src/YBasic/YSelect/YSelect.js"],"names":["ThemableYTimePickerStage","buildGenericThemableComponent","Tag","componentClassName","themeSelector","globalTheme","displayName","ThemableYTimePicker","ThemedYSelect","ThemableYSelect","ThemedYTimePickerStage","military","placeholder","noIndicators","options","Array","value","i","label","style","display","val","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","YTimePicker","SourceDisplay","source","isMDXComponent","genSubcomponent","getGenericThemableSubcomponentBuilder","ThemableYSelectValueContainer","ValueContainer","ValuePlaceholder","ValueSingleValue","ValueInputWrapper","ValueInputStage","ValueInput","forwardRef","YSelectValueComponent","menuOpen","toggleMenu","selected","searchable","child","tabindex","searchString","forwardedRef","onChange","onKeyDown","rest","onClick","o","autoCapitalize","autoComplete","autoCorrect","spellCheck","tabIndex","type","aria-autocomplete","ref","onFocus","e","opacity","clearablePath","dropdownPath","ThemableYSelectIndicatorContainer","IndicatorContainer","IndicatorSeparator","IndicatorClearable","IndicatorClearableSVG","propMutator","height","width","viewBox","focusable","children","d","IndicatorDropdown","IndicatorDropdownSVG","clearable","clearSelection","aria-label","ThemableYSelectMenuOption","ThemableYSelectMenuContainer","Menu","MenuList","MenuEmpty","menuOptions","YSelectComponent","Wrapper","useMemo","Stage","MenuOption","useState","setMenuOpen","setSearchString","kbIndex","setKbIndex","wrapperRef","useRef","inputRef","closeMenu","useClickOutsideHandler","useCallback","filteredOptions","scrollBack","node","lastKeyTime","Date","onArrow","eKey","keyTime","nextIndex","setTimeout","console","keyHandlers","ArrowDown","ArrowUp","Enter","selectedValue","Escape","className","data-value","key","selectedAndOrHighlightedRef"],"mappings":"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","file":"component---y-time-picker-mdx-42c6406f1e631d22918c.js","sourcesContent":["import React from 'react';\n\nimport { buildGenericThemableComponent } from '../../util.js';\nimport {ThemableYSelect} from '../YSelect/YSelect.js';\n\nexport const ThemableYTimePickerStage = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-time-picker',\n    themeSelector: (globalTheme) => (globalTheme.YBasic || {}).YTimePicker || {},\n    displayName: 'YTimePicker'\n});\n\n/**\n * TODO LIST\n * add indicator steppers to yselect\n * externalize DST transition disambiguation\n */\nexport const ThemableYTimePicker = globalTheme => {\n    const ThemedYSelect = ThemableYSelect(globalTheme);\n    const ThemedYTimePickerStage = ThemableYTimePickerStage(globalTheme);\n\n    return ({\n        showHour,\n        hour,\n\n        showMinute,\n        minute,\n\n        showSecond,\n        second,\n\n        showMillisecond,\n        millisecond,\n\n        military = false,\n        showMilitary,\n\n        onChange\n    }) => (\n        // FLEXIZE\n        <ThemedYTimePickerStage>\n            <ThemedYSelect\n                placeholder='hour'\n                noIndicators\n                options={Array(military ? 24: 12).fill().map((_, i) => ({value: i + 1, label: \"\"+(i + 1)}))}\n                style={{display: 'inline-block'}}\n            />\n            <ThemedYSelect\n                placeholder='minute'\n                noIndicators\n                options={Array(60).fill().map((_, i) => ({value: i, label: \"\"+i}))}\n                style={{display: 'inline-block'}}\n            />\n            <ThemedYSelect\n                placeholder='second'\n                noIndicators\n                options={Array(60).fill().map((_, i) => ({value: i, label: \"\"+i}))}\n                style={{display: 'inline-block'}}\n            />\n            {!military &&\n            <ThemedYSelect placeholder='AM/PM'\n                noIndicators\n                options={['AM', 'PM'].map(val => ({value: val, label: \"\"+val}))}\n                style={{display: 'inline-block'}}\n            />\n            }\n        </ThemedYTimePickerStage>\n    )\n}\n\nexport default ThemableYTimePicker();","export default \"import React from 'react';\\n\\nimport { buildGenericThemableComponent } from '../../util.js';\\nimport {ThemableYSelect} from '../YSelect/YSelect.js';\\n\\nexport const ThemableYTimePickerStage = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-time-picker',\\n    themeSelector: (globalTheme) => (globalTheme.YBasic || {}).YTimePicker || {},\\n    displayName: 'YTimePicker'\\n});\\n\\n/**\\n * TODO LIST\\n * add indicator steppers to yselect\\n * externalize DST transition disambiguation\\n */\\nexport const ThemableYTimePicker = globalTheme => {\\n    const ThemedYSelect = ThemableYSelect(globalTheme);\\n    const ThemedYTimePickerStage = ThemableYTimePickerStage(globalTheme);\\n\\n    return ({\\n        showHour,\\n        hour,\\n\\n        showMinute,\\n        minute,\\n\\n        showSecond,\\n        second,\\n\\n        showMillisecond,\\n        millisecond,\\n\\n        military = false,\\n        showMilitary,\\n\\n        onChange\\n    }) => (\\n        // FLEXIZE\\n        <ThemedYTimePickerStage>\\n            <ThemedYSelect\\n                placeholder='hour'\\n                noIndicators\\n                options={Array(military ? 24: 12).fill().map((_, i) => ({value: i + 1, label: \\\"\\\"+(i + 1)}))}\\n                style={{display: 'inline-block'}}\\n            />\\n            <ThemedYSelect\\n                placeholder='minute'\\n                noIndicators\\n                options={Array(60).fill().map((_, i) => ({value: i, label: \\\"\\\"+i}))}\\n                style={{display: 'inline-block'}}\\n            />\\n            <ThemedYSelect\\n                placeholder='second'\\n                noIndicators\\n                options={Array(60).fill().map((_, i) => ({value: i, label: \\\"\\\"+i}))}\\n                style={{display: 'inline-block'}}\\n            />\\n            {!military &&\\n            <ThemedYSelect placeholder='AM/PM'\\n                noIndicators\\n                options={['AM', 'PM'].map(val => ({value: val, label: \\\"\\\"+val}))}\\n                style={{display: 'inline-block'}}\\n            />\\n            }\\n        </ThemedYTimePickerStage>\\n    )\\n}\\n\\nexport default ThemableYTimePicker();\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport YTimePicker from './src/YBasic/YTimePicker/YTimePicker.js';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/YBasic/YTimePicker/YTimePicker.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Quality: Survival`}</p>\n    <h1 {...{\n      \"id\": \"ytimepicker\"\n    }}>{`YTimePicker`}</h1>\n    <Playground __position={0} __code={'<YTimePicker />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      YTimePicker,\n      SourceDisplay,\n      source\n    }} mdxType=\"Playground\">\n      <YTimePicker mdxType=\"YTimePicker\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\n// import { clearablePath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select value', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n// export const ThemableYSelectMultiValueButton = genSubcomponent('multi button');\n// export const ThemableYSelectMultiValueLabel = genSubcomponent('multi button label');\n// export const ThemableYSelectMultiValueRemove = genSubcomponent('multi button remove');\n// export const ThemableYSelectMultiValueRemoveSVG = genSubcomponent('multi button remove svg', {\n//     Tag: 'svg',\n//     propMutator: () => ({\n//         height: '20px',\n//         width: '20px',\n//         viewBox: '0 0 20 20',\n//         'aria-hidden': true,\n//         focusable: false,\n//         children: <path d={clearablePath}></path>\n//     })\n// });\n\nexport const ThemableYSelectValueContainer = globalTheme => {\n    const ValueContainer = genSubcomponent('container')(globalTheme);\n    const ValuePlaceholder = genSubcomponent('placeholder')(globalTheme);\n    const ValueSingleValue = genSubcomponent('single value')(globalTheme);\n\n    const ValueInputWrapper = genSubcomponent('input wrapper')(globalTheme);\n    const ValueInputStage = genSubcomponent('input stage')(globalTheme);\n    const ValueInput = genSubcomponent('input', {Tag: 'input', forwardRef: true})(globalTheme);\n\n    const YSelectValueComponent = ({\n        menuOpen,\n        toggleMenu,\n        selected,\n        options,\n        placeholder,\n        searchable,\n        child = {},\n        tabindex = \"0\",\n        searchString,\n        forwardedRef,\n        onChange,\n        onKeyDown,\n        ...rest\n    }) => (<ValueContainer\n        onClick={toggleMenu}\n        {...rest}\n    >\n        {/* <MultiValueButton>\n            <MultiValueLabel>\n                Goofy\n            </MultiValueLabel>\n            <MultiValueRemove>\n                <MultiValueRemoveSVG/>\n            </MultiValueRemove>\n        </MultiValueButton> */}\n        {!(searchable && menuOpen) &&\n            (selected == null\n            ? <ValuePlaceholder\n                {...child}\n            >\n                {placeholder}\n            </ValuePlaceholder>\n            : <ValueSingleValue\n                {...child}\n            >\n                {options.filter(o => o.value === selected)[0].label}\n            </ValueSingleValue>\n        )}\n        <ValueInputWrapper> \n            <ValueInputStage>\n                <ValueInput\n                    autoCapitalize='none'\n                    autoComplete='off'\n                    autoCorrect='off'\n                    spellCheck='false'\n                    tabIndex={tabindex}\n                    type='text'\n                    aria-autocomplete='list'\n                    value={searchString}\n                    ref={forwardedRef}\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    onFocus={() => {\n                        if(!menuOpen) {\n                            toggleMenu();\n                        }\n                    }} \n                    onClick={(e) => {e.stopPropagation(); return false;}}\n                    style={{opacity: (searchable && menuOpen) ? '1' : '0'}}\n                ></ValueInput>\n            </ValueInputStage>\n        </ValueInputWrapper>\n    </ValueContainer>);\n\n    YSelectValueComponent.displayName = 'YSelectValueContainer';\n    return React.forwardRef((props, ref) => {\n        return <YSelectValueComponent {...props} forwardedRef={ref} />;\n    });\n}\n\nexport default ThemableYSelectValueContainer();","export const clearablePath = \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\";\nexport const dropdownPath = \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\";","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\nimport { clearablePath, dropdownPath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select indicator', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelectIndicatorContainer = globalTheme => {\n    const IndicatorContainer = genSubcomponent('container')(globalTheme);\n    const IndicatorSeparator = genSubcomponent('separator')(globalTheme);\n    const IndicatorClearable = genSubcomponent('clearable', {Tag: 'button'})(globalTheme);\n    const IndicatorClearableSVG = genSubcomponent('clearable svg', {\n        Tag: 'svg',\n        propMutator: () => ({\n            height: '20px',\n            width: '20px',\n            viewBox: '0 0 20 20',\n            'aria-hidden': true,\n            focusable: false,\n            children: <path d={clearablePath}></path>\n        })\n    })(globalTheme);\n    const IndicatorDropdown = genSubcomponent('dropdown', {Tag: 'button'})(globalTheme);\n    const IndicatorDropdownSVG = genSubcomponent('dropdown svg', {\n        Tag: 'svg',\n        propMutator: () => ({\n            height: '20px',\n            width: '20px',\n            viewBox: '0 0 20 20',\n            'aria-hidden': true,\n            focusable: false,\n            children: <path d={dropdownPath}></path>\n        })\n    })(globalTheme);\n\n    return ({\n        selected,\n        clearable,\n        clearSelection,\n        toggleMenu\n    }) => (<IndicatorContainer>\n        {clearable && (selected !== null) && <IndicatorClearable\n            onClick={clearSelection}\n            aria-label='clear selection'\n        >\n            <IndicatorClearableSVG/>\n        </IndicatorClearable>\n        }\n        <IndicatorSeparator/>\n        <IndicatorDropdown onClick={toggleMenu} aria-label='open menu'>\n            <IndicatorDropdownSVG/>\n        </IndicatorDropdown>\n    </IndicatorContainer>);\n}","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select menu', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelectMenuOption = genSubcomponent('option', {forwardRef: true});\n\nexport const ThemableYSelectMenuContainer = globalTheme => {\n    const Menu = genSubcomponent()(globalTheme);\n    const MenuList = genSubcomponent('list')(globalTheme);\n    const MenuEmpty = genSubcomponent('empty')(globalTheme);\n\n    const YSelectValueComponent = ({\n        menuOpen,\n        menuOptions,\n        options\n    }) => (menuOpen && <Menu>\n        <MenuList>\n            {\n                menuOptions.length\n                    ? menuOptions\n                    : <MenuEmpty>{options.length ? 'No options match' : 'No options'}</MenuEmpty>\n            }\n        </MenuList>\n    </Menu>);\n\n    YSelectValueComponent.displayName = 'YSelectMenuContainer';\n    return React.forwardRef((props, ref) => {\n        return <YSelectValueComponent {...props} forwardedRef={ref} />;\n    });\n}\n\nexport default ThemableYSelectMenuContainer();","import React, { useState, useRef, useMemo, useCallback } from 'react';\nimport {getGenericThemableSubcomponentBuilder, useClickOutsideHandler} from '../../util.js';\nimport {ThemableYSelectValueContainer} from './YSelectValueContainer.js';\nimport {ThemableYSelectIndicatorContainer} from './YSelectIndicatorContainer.js';\nimport {ThemableYSelectMenuContainer, ThemableYSelectMenuOption} from './YSelectMenuContainer.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n/**\n * \n * TODO LIST:\n * remove this.state.selected and require orchestration\n */\nexport const ThemableYSelect = globalTheme =>  {\n    const YSelectComponent = ({\n        options = [],\n        placeholder = 'Select...',\n        clearable = true,\n        searchable = true,\n        noIndicators = false,\n        selected,\n        onChange,\n        forwardedRef,\n        ...rest\n    }) => {\n\n        const Wrapper = useMemo(() => genSubcomponent('', {forwardRef: true})(globalTheme), []);\n        const Stage = useMemo(() => genSubcomponent('stage')(globalTheme), []);\n\n        const ValueContainer = useMemo(() => ThemableYSelectValueContainer(globalTheme), []);\n        const IndicatorContainer = useMemo(() => ThemableYSelectIndicatorContainer(globalTheme), []);\n\n        const Menu = useMemo(() => ThemableYSelectMenuContainer(globalTheme), []);\n        const MenuOption = useMemo(() => ThemableYSelectMenuOption(globalTheme), []);\n\n        const [menuOpen, setMenuOpen] = useState(false);\n        const [searchString, setSearchString] = useState('');\n        const [kbIndex, setKbIndex] = useState(null);\n\n        const wrapperRef = useRef();\n        const inputRef = useRef();\n\n        const closeMenu = () => {\n            setMenuOpen(false); setSearchString(''); setKbIndex(null);\n        }\n\n        useClickOutsideHandler(wrapperRef, useCallback(() => {\n            if(menuOpen) {\n                closeMenu();\n            }\n        }, [menuOpen]));\n\n        const filteredOptions = useMemo(\n            () => options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase())),\n            [searchString, options]\n        );\n\n        const scrollBack = useCallback(node => {\n            if(node !== null) { // TODO add necessity check\n                if(node.scrollIntoViewIfNeeded) {\n                    node.scrollIntoViewIfNeeded();\n                } else {\n                    node.parentNode.scrollTop = node.offsetTop;\n                }\n            }\n        }, []);\n\n        const selectedAndOrHighlightedRef = (selected, highlighted) => {\n            if((selected && kbIndex === null) || highlighted) {\n                return {ref: scrollBack};\n            } else {\n                return {}\n            }\n        }\n\n        const lastKeyTime = useRef(new Date().getTime());\n\n        const onArrow = eKey => {\n            const keyTime = new Date().getTime();\n            if((keyTime - lastKeyTime.current) > 30) {\n                let nextIndex = 0;\n                if(kbIndex !== null){\n                    if(eKey === 'ArrowDown') {\n                        nextIndex = kbIndex + 1;\n                    }\n                    if(eKey === 'ArrowUp') {\n                        nextIndex = kbIndex - 1;\n                    }\n                }\n                if(nextIndex < 0) {\n                    nextIndex = filteredOptions.length - 1;\n                }\n                if(nextIndex >= filteredOptions.length) {\n                    nextIndex = 0;\n                }\n                if(kbIndex !== nextIndex){\n                    setTimeout(() => setKbIndex(nextIndex), 0);\n                }\n                lastKeyTime.current = keyTime;\n            } else {\n                console.log('skipped'); // remove throttler?\n            }\n        }\n        const keyHandlers = {\n            ArrowDown: onArrow,\n            ArrowUp: onArrow,\n            Enter: () => {\n                if(kbIndex !== null && kbIndex >= 0 && kbIndex < filteredOptions.length) {\n                    const selectedValue = filteredOptions[kbIndex].value;\n                    closeMenu();\n                    onChange(selectedValue);\n                    inputRef.current && inputRef.current.blur();\n                } else {\n                    setKbIndex(0);\n                }\n            },\n            Escape: () => {\n                closeMenu();\n            }\n        }\n        const onInputKeyDown = e => {\n            const eKey = e.key;\n            if(keyHandlers[eKey]) {\n                keyHandlers[eKey](eKey);\n                e.preventDefault();\n            }\n        }\n\n        const toggleMenu = () => {\n            if(menuOpen) {\n                closeMenu();\n            } else {\n                setMenuOpen(true);\n                console.log(inputRef.current);\n                inputRef.current && inputRef.current.focus();\n            }\n        }\n\n        const clearSelection = useCallback(() => {\n            const wasNull = selected === null;\n            if(!wasNull) {\n                onChange(null);\n            }\n        }, [selected, onChange]);\n\n        const onSearchStringChange = e => setSearchString(e.target.value);\n\n        const menuOptions = filteredOptions  // TODO memoize\n            .map(({value, label}, i) => (\n                <MenuOption \n                    className={(value === selected ? 'selected' : '') + (i === kbIndex ? ' highlighted' : '')}\n                    data-value={value} // I'm here for dev tool visibility\n                    onClick={() => {closeMenu(); selected !== value && onChange(value);}}\n                    key={`${value}-${i}`}\n                    {...selectedAndOrHighlightedRef(value === selected, i === kbIndex)}\n                >\n                    {label}\n                </MenuOption>));\n\n        return (\n            <Wrapper ref={wrapperRef}>\n                <Stage {...rest}>\n                    <ValueContainer\n                        menuOpen={menuOpen}\n                        toggleMenu={toggleMenu}\n                        selected={selected}\n                        options={options}\n                        placeholder={placeholder}\n                        searchable={searchable}\n                        onChange={onSearchStringChange}\n                        onKeyDown={onInputKeyDown}\n                        searchString={searchString}\n                        ref={inputRef}\n                    />\n                    {!noIndicators && <IndicatorContainer\n                        selected={selected}\n                        clearable={clearable}\n                        clearSelection={clearSelection}\n                        toggleMenu={toggleMenu}\n                    />}\n                </Stage>\n                <Menu\n                    menuOpen={menuOpen}\n                    menuOptions={menuOptions}\n                    options={options}\n                />\n            </Wrapper>);\n    \n    }\n    YSelectComponent.displayName = 'YSelect';\n    return YSelectComponent;\n}\n\n\nexport default ThemableYSelect();"],"sourceRoot":""}