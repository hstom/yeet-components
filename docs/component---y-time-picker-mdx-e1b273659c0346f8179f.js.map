{"version":3,"sources":["webpack:///../src/YBasic/YTimePicker/YTimePicker.js","webpack:///../src/YBasic/YTimePicker/YTimePicker.js?089c","webpack:///../YTimePicker.mdx","webpack:///../src/YBasic/YSelect/subcomponents/YSelectDisplay.js","webpack:///../src/YBasic/YSelect/subcomponents/YSelectSVGs.js","webpack:///../src/YBasic/YSelect/subcomponents/YSelectIndicator.js","webpack:///../src/YBasic/YSelect/subcomponents/YSelectMenu.js","webpack:///../src/YBasic/YSelect/YSelect.js"],"names":["YTimePickerStage","buildGenericThemableComponent","Tag","componentClassName","themeSelector","globalTheme","displayName","YTimePicker","military","placeholder","noIndicators","options","Array","value","i","label","style","display","val","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","SourceDisplay","source","isMDXComponent","genSubcomponent","getGenericThemableSubcomponentBuilder","DisplayContainer","DisplayPlaceholder","DisplaySingleValue","DisplayInputWrapper","DisplayInputStage","DisplayInput","forwardRef","YSelectDisplayComponent","yPlaceholder","ySingleValue","yInputWrapper","yInputStage","yInput","yChild","menuOpen","toggleMenu","selected","searchable","tabindex","searchString","forwardedRef","onChange","onKeyDown","rest","onClick","Object","o","autoCapitalize","autoComplete","autoCorrect","spellCheck","tabIndex","type","aria-autocomplete","ref","onFocus","e","opacity","YSelectDisplay","clearablePath","dropdownPath","IndicatorContainer","IndicatorSeparator","IndicatorClearable","IndicatorClearableSVG","propMutator","height","width","viewBox","focusable","children","d","IndicatorDropdown","IndicatorDropdownSVG","YSelectIndicator","yClearable","yClearableSVG","ySeparator","yDropdown","yDropdownSVG","clearable","clearSelection","aria-label","YSelectMenuOption","Menu","MenuList","MenuEmpty","YSelectMenuComponent","yList","yEmpty","menuOptions","YSelectMenu","YSelectComponent","yWrapper","yDisplay","yIndicators","yMenu","yOption","Wrapper","useMemo","Stage","useState","setMenuOpen","setSearchString","kbIndex","setKbIndex","wrapperRef","useRef","inputRef","closeMenu","useClickOutsideHandler","useCallback","filteredOptions","scrollBack","node","lastKeyTime","Date","onArrow","eKey","keyTime","nextIndex","setTimeout","console","keyHandlers","ArrowDown","ArrowUp","Enter","selectedValue","Escape","className","data-value","key","YSelect"],"mappings":"uMAKaA,EAAmBC,YAA8B,CAC1DC,IAD0D,MAE1DC,mBAF0D,gBAG1DC,cAAe,mBAAkBC,UAAD,iBAAjB,IACfC,YAAa,qB,yXASV,IAAMC,EAAc,SAAC,GAAD,+GAavBC,OAbuB,0CAmBvB,WADA,CACA,OACI,iBACIC,YADJ,OAEIC,cAFJ,EAGIC,QAASC,MAAMJ,EAAQ,GAAd,gBAAoC,oBAAW,CAACK,MAAOC,EAAR,EAAeC,MAAO,IAAID,EAAJ,OAC9EE,MAAO,CAACC,QAAS,kBAErB,iBACIR,YADJ,SAEIC,cAFJ,EAGIC,QAASC,MAAA,gBAAqB,oBAAW,CAACC,MAAD,EAAWE,MAAO,GAAGD,MAC9DE,MAAO,CAACC,QAAS,kBAErB,iBACIR,YADJ,SAEIC,cAFJ,EAGIC,QAASC,MAAA,gBAAqB,oBAAW,CAACC,MAAD,EAAWE,MAAO,GAAGD,MAC9DE,MAAO,CAACC,QAAS,mBAEnBT,GACF,iBAASC,YAAT,QACIC,cADJ,EAEIC,QAAS,CAAC,KAAK,MAAN,KAAiB,SAAAO,GAAG,MAAK,CAACL,MAAD,EAAaE,MAAO,GAAGG,MACzDF,MAAO,CAACC,QAAS,oB,4VAM7B,Q,yWClEe,0tD,oSCUR,IAAME,EAAe,Q,gKAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,0CACA,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,kBAAmBC,QAAS,CAC7DJ,QACAH,kBACAQ,eACAvB,cACAwB,kBACAC,UACCN,QAAQ,cACT,YAAC,EAAD,CAAaA,QAAQ,iBAEvB,iBAAQ,CACN,GAAM,UADR,UAGA,YAACK,EAAA,EAAD,CAAeC,OAAQA,EAAQN,QAAQ,mB,uJAK3CH,EAAWU,gBAAiB,G,sUC9C5B,IAAMC,EAAkBC,YAAsC,oBAAoB,SAAA9B,GAAW,OAAMA,UAAD,aAAL,MAiBvF+B,EAAmBF,EAAzB,aACMG,EAAqBH,EAA3B,eACMI,EAAqBJ,EAA3B,gBAEMK,EAAsBL,EAA5B,iBACMM,EAAoBN,EAA1B,eACMO,EAAeP,EAAgB,QAAS,CAAChC,IAAD,QAAewC,YAAY,IAEnEC,EAA0B,SAAC,GAAD,qBAC5BC,OAD4B,4BAE5BC,OAF4B,6BAG5BC,OAH4B,2BAI5BC,OAJ4B,sBAK5BC,OAL4B,sBAM5BC,OAN4B,WAS5BC,EAT4B,WAU5BC,EAV4B,aAW5BC,EAX4B,WAY5BzC,EAZ4B,UAa5BF,EAb4B,cAc5B4C,EAd4B,0BAe5BC,OAf4B,YAgB5BC,EAhB4B,eAiB5BC,EAjB4B,eAkB5BC,EAlB4B,WAmB5BC,EAnB4B,YAoBzBC,E,oIApByB,mOAqBzB,iBACHC,QAAST,GADN,KAYAE,GAAF,KACID,QACC,cACMS,mBADN,GADDT,GAMC,cACMS,mBADN,GAGGlD,EAAA,QAAe,SAAAmD,GAAC,OAAIA,UAAJ,KAAhB,GAtBN,QAyBH,gBAGI,gBAGI,sBAEIC,eAFJ,OAGIC,aAHJ,MAIIC,YAJJ,MAKIC,WALJ,QAMIC,SANJ,EAOIC,KAPJ,OAQIC,oBARJ,OASIxD,MATJ,EAUIyD,IAVJ,EAWIb,SAXJ,EAYIC,UAZJ,EAaIa,QAAS,WACL,GACIpB,KAGRS,QAAS,YAA6B,OAArBY,qBAA4B,GAC7CxD,MAAO,CAACyD,QAAUpB,GAAD,MAAiC,YAMlEV,wCACO,IAAM+B,EAAiB,gBAAiB,cAC3C,OAAO,sBAAoClB,aAAcc,a,myBC7GtD,IAAMK,EAAN,6V,8WACA,IAAMC,EAAN,wR,2jBCIP,IAAM1C,EAAkBC,YAAsC,sBAAsB,SAAA9B,GAAW,OAAMA,UAAD,aAAL,MAEzFwE,EAAqB3C,EAA3B,aACM4C,EAAqB5C,EAA3B,aACM6C,EAAqB7C,EAAgB,YAAa,CAAChC,IAAK,WACxD8E,EAAwB9C,EAAgB,gBAAiB,CAC3DhC,IAD2D,MAE3D+E,YAAa,iBAAO,CAChBC,OADgB,OAEhBC,MAFgB,OAGhBC,QAHgB,YAIhB,eAJgB,EAKhBC,WALgB,EAMhBC,SAAU,oBAAMC,EAAGZ,QAGrBa,EAAoBtD,EAAgB,WAAY,CAAChC,IAAK,WACtDuF,EAAuBvD,EAAgB,eAAgB,CACzDhC,IADyD,MAEzD+E,YAAa,iBAAO,CAChBC,OADgB,OAEhBC,MAFgB,OAGhBC,QAHgB,YAIhB,eAJgB,EAKhBC,WALgB,EAMhBC,SAAU,oBAAMC,EAAGX,QAIdc,EAAmB,SAAC,GAAD,mBAC5BC,OAD4B,6BAE5BC,OAF4B,0BAG5BC,OAH4B,yBAI5BC,OAJ4B,4BAK5BC,OAL4B,WAO5B3C,EAP4B,WAQ5B4C,EAR4B,YAS5BC,EAT4B,iBAU5B9C,EAV4B,aAWzBQ,E,oIAXyB,uIAYzB,gBACFqC,UAAc5C,GAAsB,sBAEjCQ,QAFiC,EAGjCsC,aAAW,oBAEX,cAND,IASH,cATG,GAUH,sBAAkCtC,QAAlC,EAAuDsC,aAAW,cAC9D,cAvBwB,M,wwBC9BhC,IAAMhE,EAAkBC,YAAsC,iBAAiB,SAAA9B,GAAW,OAAMA,UAAD,aAAL,MAE7E8F,EAAoBjE,EAAgB,SAAU,CAACQ,YAAY,S,+YAExE,IAAM0D,EAAOlE,IACPmE,EAAWnE,EAAjB,QACMoE,EAAYpE,EAAlB,SAEMqE,EAAuB,SAAC,GAAD,cACzBC,OADyB,sBAEzBC,OAFyB,WAIzBvD,EAJyB,WAKzBwD,EALyB,cAMzB/F,EANyB,UAOtBgD,E,oIAPsB,iEAQtBT,GAAY,gBACf,gBAEQwD,WAEM,gBAAwB/F,4BAbb,iBAkB7B4F,qCACO,IAAMI,EAAN,O,koCCxBP,IAAMzE,EAAkBC,YAAsC,YAAY,SAAA9B,GAAW,OAAMA,UAAD,aAAL,MAO/EuG,EAAmB,SAAC,GAenB,IAAD,IAdFC,gBAcE,MAdO,GAcP,MAbFC,gBAaE,MAbO,GAaP,MAZFC,mBAYE,MAZU,GAYV,MAXFC,MAAQC,GAWN,aAXyB,GAWzB,GAXMA,QAAYD,EAWlB,qBATFrG,eASE,MATQ,GASR,MARFF,mBAQE,MARY,YAQZ,MAPFuF,iBAOE,aANF3C,kBAME,aALF3C,oBAKE,SAJF0C,EAIE,EAJFA,SACAK,EAGE,EAHFA,SAEGE,GACD,EAFFH,aAEE,yJAEI0D,EAAUC,mBAAQ,kBAAMjF,EAAgB,GAAI,CAACQ,YAAY,MAA/D,IACM0E,EAAQD,mBAAQ,kBAAMjF,EAAN,WAAtB,IAHE,EAK8BmF,oBAL9B,GAKKnE,EALL,KAKeoE,EALf,OAMsCD,mBANtC,IAMK9D,EANL,KAMmBgE,EANnB,OAO4BF,mBAP5B,MAOKG,EAPL,KAOcC,EAPd,KASIC,EAAaC,mBACbC,EAAWD,mBAEXE,EAAY,WACdP,MAAoBC,MAAqBE,SAG7CK,YAAuBJ,EAAYK,uBAAY,WACxC7E,GACC2E,MAEL,CAJHC,KAMA,IAAME,EAAkBb,mBACpB,kBAAMxG,EAAA,QAAe,2BAAaI,uBAA6BwC,EAA1C,oBACrB,CAACA,EAFL,IAKM0E,EAAaF,uBAAY,SAAAG,GAC3B,OAAGA,IACIA,EAAH,uBACIA,2BAEAA,uBAA4BA,EAA5BA,aALZ,IAUMC,EAAcR,kBAAO,IAAIS,MAA/B,WAEMC,EAAU,SAAAC,GACZ,IAAMC,GAAU,IAAIH,MAApB,UACA,GAAIG,EAAUJ,EAAX,QAAH,GAAyC,CACrC,IAAIK,EAAJ,EACA,OAAGhB,IACC,cAAGc,IACCE,EAAYhB,EAAZgB,GAEJ,YAAGF,IACCE,EAAYhB,EAAZgB,IAGLA,EAAH,IACIA,EAAYR,SAAZQ,GAEDA,GAAaR,EAAhB,SACIQ,KAEDhB,IAAH,GACIiB,YAAW,kBAAMhB,EAAN,KAAXgB,GAEJN,iBAEAO,YADG,YAILC,EAAc,CAChBC,UADgB,EAEhBC,QAFgB,EAGhBC,MAAO,WACH,GAAGtB,UAAoBA,GAApBA,GAAoCA,EAAUQ,EAAjD,OAAyE,CACrE,IAAMe,EAAgBf,KAAtB,MACAH,IACApE,KACAmE,WAAoBA,UAApBA,YAEAH,MAGRuB,OAAQ,WACJnB,MAWF1E,EAAa,WACZD,EACC2E,KAEAP,MACAM,WAAoBA,UAApBA,UAIF3B,EAAiB8B,uBAAY,WAC/B,OAAgB3E,GAEZK,UAEL,CAACL,EALJ,IASMsD,GAAcS,mBAAQ,kBAAMa,EAAA,KACzB,kBAAEnH,EAAF,QAASE,EAAT,eACD,sBAEIkI,WAAYpI,iBAAD,KAA0CC,qBAFzD,IAGIoI,aAHJ,EAIItF,QAAS,WAAOiE,IAAazE,OAAsBK,EAAtBL,IAC7B+F,IAAQtI,EAAL,IAAcC,GAEb,cACI,OAAIsC,GAAD,OAAaoE,GAAhB,EACW,CAAClD,IAAK2D,GAEP,GAJd,CAMGpH,IAPH,EAOuBC,IAb/B,IADC,QAkBuB,CAACkH,EAAgB,EAAjB,MAnBhC,IAqBA,OACI,sBAAuB1D,IAAKoD,IACxB,gBACI,sBAEIxE,SAFJ,EAGIC,WAHJ,EAIIC,SAJJ,EAKIzC,QALJ,EAMIF,YANJ,EAOI4C,WAPJ,EAQII,SAlCa,SAAAe,GAAC,OAAI+C,EAAgB/C,SAApB,QAmCdd,UA3DO,SAAAc,GACnB,IAAM8D,EAAO9D,EAAb,IACGmE,EAAH,KACIA,QACAnE,qBAwDQjB,aAVJ,EAWIe,IAAKsD,MAEPlH,GAAgB,sBAEd0C,SAFc,EAGd4C,UAHc,EAIdC,eAJc,EAKd9C,WAAYA,MAGpB,sBAEID,SAFJ,EAGIwD,YAHJ,GAII/F,QAASA,OAKzBiG,wBACO,IAAMwC,EAAN,O","file":"component---y-time-picker-mdx-e1b273659c0346f8179f.js","sourcesContent":["import React from 'react';\n\nimport { buildGenericThemableComponent } from '../../util.js';\nimport {YSelect} from '../YSelect/YSelect.js';\n\nexport const YTimePickerStage = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-time-picker',\n    themeSelector: (globalTheme) => (globalTheme.YBasic || {}).YTimePicker || {},\n    displayName: 'YTimePicker'\n});\n\n/**\n * TODO LIST\n * add indicator steppers to yselect\n * externalize DST transition disambiguation\n */\n\nexport const YTimePicker = ({\n    showHour,\n    hour,\n\n    showMinute,\n    minute,\n\n    showSecond,\n    second,\n\n    showMillisecond,\n    millisecond,\n\n    military = false,\n    showMilitary,\n\n    onChange\n}) => (\n    // FLEXIZE\n    <YTimePickerStage>\n        <YSelect\n            placeholder='hour'\n            noIndicators\n            options={Array(military ? 24: 12).fill().map((_, i) => ({value: i + 1, label: \"\"+(i + 1)}))}\n            style={{display: 'inline-block'}}\n        />\n        <YSelect\n            placeholder='minute'\n            noIndicators\n            options={Array(60).fill().map((_, i) => ({value: i, label: \"\"+i}))}\n            style={{display: 'inline-block'}}\n        />\n        <YSelect\n            placeholder='second'\n            noIndicators\n            options={Array(60).fill().map((_, i) => ({value: i, label: \"\"+i}))}\n            style={{display: 'inline-block'}}\n        />\n        {!military &&\n        <YSelect placeholder='AM/PM'\n            noIndicators\n            options={['AM', 'PM'].map(val => ({value: val, label: \"\"+val}))}\n            style={{display: 'inline-block'}}\n        />\n        }\n    </YTimePickerStage>\n)\n\nexport default YTimePicker;","export default \"import React from 'react';\\n\\nimport { buildGenericThemableComponent } from '../../util.js';\\nimport {YSelect} from '../YSelect/YSelect.js';\\n\\nexport const YTimePickerStage = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-time-picker',\\n    themeSelector: (globalTheme) => (globalTheme.YBasic || {}).YTimePicker || {},\\n    displayName: 'YTimePicker'\\n});\\n\\n/**\\n * TODO LIST\\n * add indicator steppers to yselect\\n * externalize DST transition disambiguation\\n */\\n\\nexport const YTimePicker = ({\\n    showHour,\\n    hour,\\n\\n    showMinute,\\n    minute,\\n\\n    showSecond,\\n    second,\\n\\n    showMillisecond,\\n    millisecond,\\n\\n    military = false,\\n    showMilitary,\\n\\n    onChange\\n}) => (\\n    // FLEXIZE\\n    <YTimePickerStage>\\n        <YSelect\\n            placeholder='hour'\\n            noIndicators\\n            options={Array(military ? 24: 12).fill().map((_, i) => ({value: i + 1, label: \\\"\\\"+(i + 1)}))}\\n            style={{display: 'inline-block'}}\\n        />\\n        <YSelect\\n            placeholder='minute'\\n            noIndicators\\n            options={Array(60).fill().map((_, i) => ({value: i, label: \\\"\\\"+i}))}\\n            style={{display: 'inline-block'}}\\n        />\\n        <YSelect\\n            placeholder='second'\\n            noIndicators\\n            options={Array(60).fill().map((_, i) => ({value: i, label: \\\"\\\"+i}))}\\n            style={{display: 'inline-block'}}\\n        />\\n        {!military &&\\n        <YSelect placeholder='AM/PM'\\n            noIndicators\\n            options={['AM', 'PM'].map(val => ({value: val, label: \\\"\\\"+val}))}\\n            style={{display: 'inline-block'}}\\n        />\\n        }\\n    </YTimePickerStage>\\n)\\n\\nexport default YTimePicker;\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport YTimePicker from './src/YBasic/YTimePicker/YTimePicker.js';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/YBasic/YTimePicker/YTimePicker.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Quality: Survival`}</p>\n    <h1 {...{\n      \"id\": \"ytimepicker\"\n    }}>{`YTimePicker`}</h1>\n    <Playground __position={0} __code={'<YTimePicker />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      YTimePicker,\n      SourceDisplay,\n      source\n    }} mdxType=\"Playground\">\n      <YTimePicker mdxType=\"YTimePicker\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../../util.js';\n// import { clearablePath } from './YSelectSVGs.js';\nimport '../YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select display', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n// export const ThemableYSelectMultiValueButton = genSubcomponent('multi button');\n// export const ThemableYSelectMultiValueLabel = genSubcomponent('multi button label');\n// export const ThemableYSelectMultiValueRemove = genSubcomponent('multi button remove');\n// export const ThemableYSelectMultiValueRemoveSVG = genSubcomponent('multi button remove svg', {\n//     Tag: 'svg',\n//     propMutator: () => ({\n//         height: '20px',\n//         width: '20px',\n//         viewBox: '0 0 20 20',\n//         'aria-hidden': true,\n//         focusable: false,\n//         children: <path d={clearablePath}></path>\n//     })\n// });\n\nconst DisplayContainer = genSubcomponent('container');\nconst DisplayPlaceholder = genSubcomponent('placeholder');\nconst DisplaySingleValue = genSubcomponent('single value');\n\nconst DisplayInputWrapper = genSubcomponent('input wrapper');\nconst DisplayInputStage = genSubcomponent('input stage');\nconst DisplayInput = genSubcomponent('input', {Tag: 'input', forwardRef: true});\n\nconst YSelectDisplayComponent = ({\n    yPlaceholder={},\n    ySingleValue={},\n    yInputWrapper={},\n    yInputStage={},\n    yInput={},\n    yChild={},\n\n\n    menuOpen,\n    toggleMenu,\n    selected,\n    options,\n    placeholder,\n    searchable,\n    tabindex = \"0\",\n    searchString,\n    forwardedRef,\n    onChange,\n    onKeyDown,\n    ...rest\n}) => (<DisplayContainer\n    onClick={toggleMenu}\n    {...rest}\n>\n    {/* <MultiValueButton>\n        <MultiValueLabel>\n            Goofy\n        </MultiValueLabel>\n        <MultiValueRemove>\n            <MultiValueRemoveSVG/>\n        </MultiValueRemove>\n    </MultiValueButton> */}\n    {!(searchable && menuOpen) &&\n        (selected == null\n        ? <DisplayPlaceholder\n            {...Object.assign({}, yChild, yPlaceholder)}\n        >\n            {placeholder}\n        </DisplayPlaceholder>\n        : <DisplaySingleValue\n            {...Object.assign({}, yChild, ySingleValue)}\n        >\n            {options.filter(o => o.value === selected)[0].label}\n        </DisplaySingleValue>\n    )}\n    <DisplayInputWrapper\n        {...yInputWrapper}\n    > \n        <DisplayInputStage\n            {...yInputStage}\n        >\n            <DisplayInput\n                {...yInput}\n                autoCapitalize='none'\n                autoComplete='off'\n                autoCorrect='off'\n                spellCheck='false'\n                tabIndex={tabindex}\n                type='text'\n                aria-autocomplete='list'\n                value={searchString}\n                ref={forwardedRef}\n                onChange={onChange}\n                onKeyDown={onKeyDown}\n                onFocus={() => {\n                    if(!menuOpen) {\n                        toggleMenu();\n                    }\n                }} \n                onClick={(e) => {e.stopPropagation(); return false;}}\n                style={{opacity: (searchable && menuOpen) ? '1' : '0'}}\n            ></DisplayInput>\n        </DisplayInputStage>\n    </DisplayInputWrapper>\n</DisplayContainer>);\n\nYSelectDisplayComponent.displayName = 'YSelectDisplayContainer';\nexport const YSelectDisplay = React.forwardRef((props, ref) => {\n    return <YSelectDisplayComponent {...props} forwardedRef={ref} />;\n});\n\nexport default YSelectDisplay;","export const clearablePath = \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\";\nexport const dropdownPath = \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\";","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../../util.js';\nimport { clearablePath, dropdownPath } from './YSelectSVGs.js';\nimport '../YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select indicator', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nconst IndicatorContainer = genSubcomponent('container');\nconst IndicatorSeparator = genSubcomponent('separator');\nconst IndicatorClearable = genSubcomponent('clearable', {Tag: 'button'});\nconst IndicatorClearableSVG = genSubcomponent('clearable svg', {\n    Tag: 'svg',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={clearablePath}></path>\n    })\n});\nconst IndicatorDropdown = genSubcomponent('dropdown', {Tag: 'button'});\nconst IndicatorDropdownSVG = genSubcomponent('dropdown svg', {\n    Tag: 'svg',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={dropdownPath}></path>\n    })\n});\n\nexport const YSelectIndicator = ({\n    yClearable={},\n    yClearableSVG={},\n    ySeparator={},\n    yDropdown={},\n    yDropdownSVG={},\n\n    selected,\n    clearable,\n    clearSelection,\n    toggleMenu,\n    ...rest\n}) => (<IndicatorContainer {...rest}>\n    {clearable && (selected !== null) && <IndicatorClearable\n        {...yClearable}\n        onClick={clearSelection}\n        aria-label='clear selection'\n    >\n        <IndicatorClearableSVG {...yClearableSVG}/>\n    </IndicatorClearable>\n    }\n    <IndicatorSeparator {...ySeparator}/>\n    <IndicatorDropdown {...yDropdown} onClick={toggleMenu} aria-label='open menu'>\n        <IndicatorDropdownSVG {...yDropdownSVG}/>\n    </IndicatorDropdown>\n</IndicatorContainer>);\n\nexport default YSelectIndicator;","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../../util.js';\nimport '../YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select menu', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const YSelectMenuOption = genSubcomponent('option', {forwardRef: true});\n\nconst Menu = genSubcomponent();\nconst MenuList = genSubcomponent('list');\nconst MenuEmpty = genSubcomponent('empty');\n\nconst YSelectMenuComponent = ({\n    yList={},\n    yEmpty={},\n\n    menuOpen,\n    menuOptions,\n    options,\n    ...rest\n}) => (menuOpen && <Menu {...rest}>\n    <MenuList {...yList}>\n        {\n            menuOptions.length\n                ? menuOptions\n                : <MenuEmpty {...yEmpty}>{options.length ? 'No options match' : 'No options'}</MenuEmpty>\n        }\n    </MenuList>\n</Menu>);\n\nYSelectMenuComponent.displayName = 'YSelectMenuComponent';\nexport const YSelectMenu = YSelectMenuComponent;\n\nexport default YSelectMenu;","import React, { useState, useRef, useMemo, useCallback } from 'react';\nimport {getGenericThemableSubcomponentBuilder, useClickOutsideHandler} from '../../util.js';\nimport {YSelectDisplay} from './subcomponents/YSelectDisplay.js';\nimport {YSelectIndicator} from './subcomponents/YSelectIndicator.js';\nimport {YSelectMenu, YSelectMenuOption} from './subcomponents/YSelectMenu.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n/**\n * TODO LIST:\n * close menu on input ref blur\n */\n\nconst YSelectComponent = ({\n    yWrapper={},\n    yDisplay={},\n    yIndicators={},\n    yMenu: {yOption, ...yMenu}={},\n    \n    options = [],\n    placeholder = 'Select...',\n    clearable = true,\n    searchable = true,\n    noIndicators = false,\n    selected,\n    onChange,\n    forwardedRef,\n    ...rest\n}) => {\n\n    const Wrapper = useMemo(() => genSubcomponent('', {forwardRef: true}), []);\n    const Stage = useMemo(() => genSubcomponent('stage'), []);\n\n    const [menuOpen, setMenuOpen] = useState(false);\n    const [searchString, setSearchString] = useState('');\n    const [kbIndex, setKbIndex] = useState(null);\n\n    const wrapperRef = useRef();\n    const inputRef = useRef();\n\n    const closeMenu = () => {\n        setMenuOpen(false); setSearchString(''); setKbIndex(null);\n    }\n\n    useClickOutsideHandler(wrapperRef, useCallback(() => {\n        if(menuOpen) {\n            closeMenu();\n        }\n    }, [menuOpen]));\n\n    const filteredOptions = useMemo(\n        () => options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase())),\n        [searchString, options]\n    );\n\n    const scrollBack = useCallback(node => {\n        if(node !== null) { // TODO add necessity check\n            if(node.scrollIntoViewIfNeeded) {\n                node.scrollIntoViewIfNeeded();\n            } else {\n                node.parentNode.scrollTop = node.offsetTop;\n            }\n        }\n    }, []);\n\n    const lastKeyTime = useRef(new Date().getTime());\n\n    const onArrow = eKey => {\n        const keyTime = new Date().getTime();\n        if((keyTime - lastKeyTime.current) > 30) {\n            let nextIndex = 0;\n            if(kbIndex !== null){\n                if(eKey === 'ArrowDown') {\n                    nextIndex = kbIndex + 1;\n                }\n                if(eKey === 'ArrowUp') {\n                    nextIndex = kbIndex - 1;\n                }\n            }\n            if(nextIndex < 0) {\n                nextIndex = filteredOptions.length - 1;\n            }\n            if(nextIndex >= filteredOptions.length) {\n                nextIndex = 0;\n            }\n            if(kbIndex !== nextIndex){\n                setTimeout(() => setKbIndex(nextIndex), 0);\n            }\n            lastKeyTime.current = keyTime;\n        } else {\n            console.log('skipped'); // remove throttler?\n        }\n    }\n    const keyHandlers = {\n        ArrowDown: onArrow,\n        ArrowUp: onArrow,\n        Enter: () => {\n            if(kbIndex !== null && kbIndex >= 0 && kbIndex < filteredOptions.length) {\n                const selectedValue = filteredOptions[kbIndex].value;\n                closeMenu();\n                onChange(selectedValue);\n                inputRef.current && inputRef.current.blur();\n            } else {\n                setKbIndex(0);\n            }\n        },\n        Escape: () => {\n            closeMenu();\n        }\n    }\n    const onInputKeyDown = e => {\n        const eKey = e.key;\n        if(keyHandlers[eKey]) {\n            keyHandlers[eKey](eKey);\n            e.preventDefault();\n        }\n    }\n\n    const toggleMenu = () => {\n        if(menuOpen) {\n            closeMenu();\n        } else {\n            setMenuOpen(true);\n            inputRef.current && inputRef.current.focus();\n        }\n    }\n\n    const clearSelection = useCallback(() => {\n        const wasNull = selected === null;\n        if(!wasNull) {\n            onChange(null);\n        }\n    }, [selected, onChange]);\n\n    const onSearchStringChange = e => setSearchString(e.target.value);\n\n    const menuOptions = useMemo(() => filteredOptions  // TODO memoize\n        .map(({value, label}, i) => (\n            <YSelectMenuOption // TODO replace with React.memo\n                {...yOption}\n                className={(value === selected ? 'selected' : '') + (i === kbIndex ? ' highlighted' : '')}\n                data-value={value} // I'm here for dev tool visibility\n                onClick={() => {closeMenu(); selected !== value && onChange(value);}}\n                key={`${value}-${i}`}\n                {...(\n                    (selected, highlighted) => {\n                        if((selected && kbIndex === null) || highlighted) {\n                            return {ref: scrollBack};\n                        } else {\n                            return {}\n                        }\n                    })(value === selected, i === kbIndex)\n                }\n            >\n                {label}\n            </YSelectMenuOption>)), [filteredOptions, kbIndex, onChange, selected, yOption, scrollBack]);\n\n    return (\n        <Wrapper {...yWrapper} ref={wrapperRef}>\n            <Stage {...rest}>\n                <YSelectDisplay\n                    {...yDisplay}\n                    menuOpen={menuOpen}\n                    toggleMenu={toggleMenu}\n                    selected={selected}\n                    options={options}\n                    placeholder={placeholder}\n                    searchable={searchable}\n                    onChange={onSearchStringChange}\n                    onKeyDown={onInputKeyDown}\n                    searchString={searchString}\n                    ref={inputRef}\n                />\n                {!noIndicators && <YSelectIndicator\n                    {...yIndicators}\n                    selected={selected}\n                    clearable={clearable}\n                    clearSelection={clearSelection}\n                    toggleMenu={toggleMenu}\n                />}\n            </Stage>\n            <YSelectMenu\n                {...yMenu}\n                menuOpen={menuOpen}\n                menuOptions={menuOptions}\n                options={options}\n            />\n        </Wrapper>);\n\n}\nYSelectComponent.displayName = 'YSelect';\nexport const YSelect = YSelectComponent;\n\nexport default YSelect;"],"sourceRoot":""}