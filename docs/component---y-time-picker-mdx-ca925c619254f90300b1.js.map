{"version":3,"sources":["webpack:///../src/YBasic/YTimePicker/YTimePicker.js","webpack:///../src/YBasic/YTimePicker/YTimePicker.js?089c","webpack:///../YTimePicker.mdx","webpack:///../src/YBasic/YSelect/YSelectValueContainer.js","webpack:///../src/YBasic/YSelect/YSelectSVGs.js","webpack:///../src/YBasic/YSelect/YSelectIndicatorContainer.js","webpack:///../src/YBasic/YSelect/YSelectMenuContainer.js","webpack:///../src/YBasic/YSelect/YSelect.js"],"names":["ThemableYTimePickerStage","buildGenericThemableComponent","Tag","componentClassName","themeSelector","globalTheme","displayName","ThemableYTimePicker","ThemedYSelect","ThemableYSelect","ThemedYTimePickerStage","military","placeholder","noIndicators","options","Array","value","i","label","style","display","val","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","State","Observe","YTimePicker","SourceDisplay","source","isMDXComponent","genSubcomponent","getGenericThemableSubcomponentBuilder","ThemableYSelectValueContainer","ValueContainer","ValuePlaceholder","ValueSingleValue","ValueInputWrapper","ValueInputStage","ValueInput","forwardRef","YSelectValueComponent","menuOpen","toggleMenu","selected","searchable","child","tabindex","searchString","forwardedRef","onChange","onKeyDown","rest","onClick","o","autoCapitalize","autoComplete","autoCorrect","spellCheck","tabIndex","type","aria-autocomplete","ref","onFocus","e","opacity","clearablePath","dropdownPath","ThemableYSelectIndicatorContainer","IndicatorContainer","IndicatorSeparator","IndicatorClearable","IndicatorClearableSVG","propMutator","height","width","viewBox","focusable","children","d","IndicatorDropdown","IndicatorDropdownSVG","clearable","clearSelection","aria-label","ThemableYSelectMenuOption","ThemableYSelectMenuContainer","Menu","MenuList","MenuEmpty","menuOptions","Wrapper","Stage","MenuOption","YSelectComponent","cachedSearchString","cachedOptions","cachedValue","nextSearchString","Object","highlightIndex","wasntNull","eKey","nextIndex","menuOptionsLength","selectedOption","mergeRefs","target","highlighted","React","render","this","getMenuOptions","state","className","data-value","key","wrapperRef","inputRef","outsideClick"],"mappings":"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","file":"component---y-time-picker-mdx-ca925c619254f90300b1.js","sourcesContent":["import React from 'react';\n\nimport { buildGenericThemableComponent } from '../../util.js';\nimport {ThemableYSelect} from '../YSelect/YSelect.js';\n\nexport const ThemableYTimePickerStage = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-time-picker',\n    themeSelector: (globalTheme) => (globalTheme.YBasic || {}).YTimePicker || {},\n    displayName: 'YTimePicker'\n});\n\n/**\n * TODO LIST\n * add indicator steppers to yselect\n * externalize DST transition disambiguation\n */\nexport const ThemableYTimePicker = globalTheme => {\n    const ThemedYSelect = ThemableYSelect(globalTheme);\n    const ThemedYTimePickerStage = ThemableYTimePickerStage(globalTheme);\n\n    return ({\n        showHour,\n        hour,\n\n        showMinute,\n        minute,\n\n        showSecond,\n        second,\n\n        showMillisecond,\n        millisecond,\n\n        military = false,\n        showMilitary,\n\n        onChange\n    }) => (\n        // FLEXIZE\n        <ThemedYTimePickerStage>\n            <ThemedYSelect\n                placeholder='hour'\n                noIndicators\n                options={Array(military ? 24: 12).fill().map((_, i) => ({value: i + 1, label: \"\"+(i + 1)}))}\n                style={{display: 'inline-block'}}\n            />\n            <ThemedYSelect\n                placeholder='minute'\n                noIndicators\n                options={Array(60).fill().map((_, i) => ({value: i, label: \"\"+i}))}\n                style={{display: 'inline-block'}}\n            />\n            <ThemedYSelect\n                placeholder='second'\n                noIndicators\n                options={Array(60).fill().map((_, i) => ({value: i, label: \"\"+i}))}\n                style={{display: 'inline-block'}}\n            />\n            {!military &&\n            <ThemedYSelect placeholder='AM/PM'\n                noIndicators\n                options={['AM', 'PM'].map(val => ({value: val, label: \"\"+val}))}\n                style={{display: 'inline-block'}}\n            />\n            }\n        </ThemedYTimePickerStage>\n    )\n}\n\nexport default ThemableYTimePicker();","export default \"import React from 'react';\\n\\nimport { buildGenericThemableComponent } from '../../util.js';\\nimport {ThemableYSelect} from '../YSelect/YSelect.js';\\n\\nexport const ThemableYTimePickerStage = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-time-picker',\\n    themeSelector: (globalTheme) => (globalTheme.YBasic || {}).YTimePicker || {},\\n    displayName: 'YTimePicker'\\n});\\n\\n/**\\n * TODO LIST\\n * add indicator steppers to yselect\\n * externalize DST transition disambiguation\\n */\\nexport const ThemableYTimePicker = globalTheme => {\\n    const ThemedYSelect = ThemableYSelect(globalTheme);\\n    const ThemedYTimePickerStage = ThemableYTimePickerStage(globalTheme);\\n\\n    return ({\\n        showHour,\\n        hour,\\n\\n        showMinute,\\n        minute,\\n\\n        showSecond,\\n        second,\\n\\n        showMillisecond,\\n        millisecond,\\n\\n        military = false,\\n        showMilitary,\\n\\n        onChange\\n    }) => (\\n        // FLEXIZE\\n        <ThemedYTimePickerStage>\\n            <ThemedYSelect\\n                placeholder='hour'\\n                noIndicators\\n                options={Array(military ? 24: 12).fill().map((_, i) => ({value: i + 1, label: \\\"\\\"+(i + 1)}))}\\n                style={{display: 'inline-block'}}\\n            />\\n            <ThemedYSelect\\n                placeholder='minute'\\n                noIndicators\\n                options={Array(60).fill().map((_, i) => ({value: i, label: \\\"\\\"+i}))}\\n                style={{display: 'inline-block'}}\\n            />\\n            <ThemedYSelect\\n                placeholder='second'\\n                noIndicators\\n                options={Array(60).fill().map((_, i) => ({value: i, label: \\\"\\\"+i}))}\\n                style={{display: 'inline-block'}}\\n            />\\n            {!military &&\\n            <ThemedYSelect placeholder='AM/PM'\\n                noIndicators\\n                options={['AM', 'PM'].map(val => ({value: val, label: \\\"\\\"+val}))}\\n                style={{display: 'inline-block'}}\\n            />\\n            }\\n        </ThemedYTimePickerStage>\\n    )\\n}\\n\\nexport default ThemableYTimePicker();\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { State, Observe } from \"mdx-observable\";\nimport YTimePicker from './src/YBasic/YTimePicker/YTimePicker.js';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/YBasic/YTimePicker/YTimePicker.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Quality: Survival`}</p>\n    <h1 {...{\n      \"id\": \"ytimepicker\"\n    }}>{`YTimePicker`}</h1>\n    <Playground __position={0} __code={'<YTimePicker />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      State,\n      Observe,\n      YTimePicker,\n      SourceDisplay,\n      source\n    }} mdxType=\"Playground\">\n      <YTimePicker mdxType=\"YTimePicker\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\n// import { clearablePath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select value', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n// export const ThemableYSelectMultiValueButton = genSubcomponent('multi button');\n// export const ThemableYSelectMultiValueLabel = genSubcomponent('multi button label');\n// export const ThemableYSelectMultiValueRemove = genSubcomponent('multi button remove');\n// export const ThemableYSelectMultiValueRemoveSVG = genSubcomponent('multi button remove svg', {\n//     Tag: 'svg',\n//     propMutator: () => ({\n//         height: '20px',\n//         width: '20px',\n//         viewBox: '0 0 20 20',\n//         'aria-hidden': true,\n//         focusable: false,\n//         children: <path d={clearablePath}></path>\n//     })\n// });\n\nexport const ThemableYSelectValueContainer = globalTheme => {\n    const ValueContainer = genSubcomponent('container')(globalTheme);\n    const ValuePlaceholder = genSubcomponent('placeholder')(globalTheme);\n    const ValueSingleValue = genSubcomponent('single value')(globalTheme);\n\n    const ValueInputWrapper = genSubcomponent('input wrapper')(globalTheme);\n    const ValueInputStage = genSubcomponent('input stage')(globalTheme);\n    const ValueInput = genSubcomponent('input', {Tag: 'input', forwardRef: true})(globalTheme);\n\n    const YSelectValueComponent = ({\n        menuOpen,\n        toggleMenu,\n        selected,\n        options,\n        placeholder,\n        searchable,\n        child = {},\n        tabindex = \"0\",\n        searchString,\n        forwardedRef,\n        onChange,\n        onKeyDown,\n        ...rest\n    }) => (<ValueContainer\n        onClick={toggleMenu}\n        {...rest}\n    >\n        {/* <MultiValueButton>\n            <MultiValueLabel>\n                Goofy\n            </MultiValueLabel>\n            <MultiValueRemove>\n                <MultiValueRemoveSVG/>\n            </MultiValueRemove>\n        </MultiValueButton> */}\n        {!(searchable && menuOpen) &&\n            (selected == null\n            ? <ValuePlaceholder\n                {...child}\n            >\n                {placeholder}\n            </ValuePlaceholder>\n            : <ValueSingleValue\n                {...child}\n            >\n                {options.filter(o => o.value === selected)[0].label}\n            </ValueSingleValue>\n        )}\n        <ValueInputWrapper> \n            <ValueInputStage>\n                <ValueInput\n                    autoCapitalize='none'\n                    autoComplete='off'\n                    autoCorrect='off'\n                    spellCheck='false'\n                    tabIndex={tabindex}\n                    type='text'\n                    aria-autocomplete='list'\n                    value={searchString}\n                    ref={forwardedRef}\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    onFocus={() => {\n                        if(!menuOpen) {\n                            toggleMenu();\n                        }\n                    }} \n                    onClick={(e) => {e.stopPropagation(); return false;}}\n                    style={{opacity: (searchable && menuOpen) ? '1' : '0'}}\n                ></ValueInput>\n            </ValueInputStage>\n        </ValueInputWrapper>\n    </ValueContainer>);\n\n    YSelectValueComponent.displayName = 'YSelectValueContainer';\n    return React.forwardRef((props, ref) => {\n        return <YSelectValueComponent {...props} forwardedRef={ref} />;\n    });\n}\n\nexport default ThemableYSelectValueContainer();","export const clearablePath = \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\";\nexport const dropdownPath = \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\";","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\nimport { clearablePath, dropdownPath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select indicator', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelectIndicatorContainer = globalTheme => {\n    const IndicatorContainer = genSubcomponent('container')(globalTheme);\n    const IndicatorSeparator = genSubcomponent('separator')(globalTheme);\n    const IndicatorClearable = genSubcomponent('clearable', {Tag: 'button'})(globalTheme);\n    const IndicatorClearableSVG = genSubcomponent('clearable svg', {\n        Tag: 'svg',\n        propMutator: () => ({\n            height: '20px',\n            width: '20px',\n            viewBox: '0 0 20 20',\n            'aria-hidden': true,\n            focusable: false,\n            children: <path d={clearablePath}></path>\n        })\n    })(globalTheme);\n    const IndicatorDropdown = genSubcomponent('dropdown', {Tag: 'button'})(globalTheme);\n    const IndicatorDropdownSVG = genSubcomponent('dropdown svg', {\n        Tag: 'svg',\n        propMutator: () => ({\n            height: '20px',\n            width: '20px',\n            viewBox: '0 0 20 20',\n            'aria-hidden': true,\n            focusable: false,\n            children: <path d={dropdownPath}></path>\n        })\n    })(globalTheme);\n\n    return ({\n        selected,\n        clearable,\n        clearSelection,\n        toggleMenu\n    }) => (<IndicatorContainer>\n        {clearable && (selected !== null) && <IndicatorClearable\n            onClick={clearSelection}\n            aria-label='clear selection'\n        >\n            <IndicatorClearableSVG/>\n        </IndicatorClearable>\n        }\n        <IndicatorSeparator/>\n        <IndicatorDropdown onClick={toggleMenu} aria-label='open menu'>\n            <IndicatorDropdownSVG/>\n        </IndicatorDropdown>\n    </IndicatorContainer>);\n}","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select menu', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelectMenuOption = genSubcomponent('option', {forwardRef: true});\n\nexport const ThemableYSelectMenuContainer = globalTheme => {\n    const Menu = genSubcomponent()(globalTheme);\n    const MenuList = genSubcomponent('list')(globalTheme);\n    const MenuEmpty = genSubcomponent('empty')(globalTheme);\n\n    const YSelectValueComponent = ({\n        menuOpen,\n        menuOptions,\n        options\n    }) => (menuOpen && <Menu>\n        <MenuList>\n            {\n                menuOptions.length\n                    ? menuOptions\n                    : <MenuEmpty>{options.length ? 'No options match' : 'No options'}</MenuEmpty>\n            }\n        </MenuList>\n    </Menu>);\n\n    YSelectValueComponent.displayName = 'YSelectMenuContainer';\n    return React.forwardRef((props, ref) => {\n        return <YSelectValueComponent {...props} forwardedRef={ref} />;\n    });\n}\n\nexport default ThemableYSelectMenuContainer();","import React from 'react';\nimport {getGenericThemableSubcomponentBuilder, mergeRefs, outsideClick} from '../../util.js';\nimport {ThemableYSelectValueContainer} from './YSelectValueContainer.js';\nimport {ThemableYSelectIndicatorContainer} from './YSelectIndicatorContainer.js';\nimport {ThemableYSelectMenuContainer, ThemableYSelectMenuOption} from './YSelectMenuContainer.js';\nimport './YSelectComponents.css';\n\n/**\n * \n * TODO LIST:\n * remove this.state.selected and require orchestration\n */\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelect = globalTheme => {\n    const Wrapper = genSubcomponent('', {forwardRef: true})(globalTheme);\n    const Stage = genSubcomponent('stage')(globalTheme);\n\n    const ValueContainer = ThemableYSelectValueContainer(globalTheme);\n    const IndicatorContainer = ThemableYSelectIndicatorContainer(globalTheme);\n\n    const Menu = ThemableYSelectMenuContainer(globalTheme);\n    const MenuOption = ThemableYSelectMenuOption(globalTheme);\n\n    class YSelectComponent extends React.Component {\n        constructor(props) {\n            super(props);\n\n            this.wrapperRef = React.createRef();\n            this.inputRef = React.createRef(); // TODO: replace with virtual ref that just focuses on bind, but how to tab in?\n            this.highlightedRef = React.createRef();\n\n            this.state = {\n                menuOpen: false,\n                selected: null,\n                searchString: '',\n                highlightIndex: null\n            }\n        }\n\n        onOutsideClick = () => {\n            if(this.state.menuOpen) {\n                this.setState({\n                    menuOpen: false,\n                    searchString: ''\n                },\n                this.syncInputFocusState\n                );\n            };\n        }\n\n        syncInputFocusState = () => {\n            if(this.inputRef.current) {\n                if(this.state.menuOpen) {\n                    this.inputRef.current.focus();\n                } else {\n                    this.inputRef.current.blur();\n                }\n            }\n        }\n\n        toggleMenu = () => {\n            this.setState(\n                ({menuOpen, searchString, ...rest}) => {\n                    const nextSearchString = !menuOpen ? searchString : '';\n                    return Object.assign(\n                        {},\n                        rest,\n                        {\n                            menuOpen: !menuOpen,\n                            searchString: nextSearchString,\n                            highlightIndex: this.getIndexOfSelectedMenuOptionOrNull(nextSearchString) // auto-highlight selected option\n                        }\n                    )\n                },\n                this.syncInputFocusState\n        )};\n\n        selectableMenuOption = value => () => this.setState(\n            {menuOpen: false, selected: value, searchString: '', highlightIndex: null}, () => (this.props.onChange || (() => {}))(value)\n        );\n        \n\n        clearSelection = () => {\n            const wasntNull = this.state.selected !== null;\n            this.setState({\n                menuOpen: false,\n                selected: null,\n                searchString: '',\n                highlightIndex: null\n            }, () => {\n                if(this.inputRef.current){this.inputRef.current.blur();}\n                if(wasntNull){(this.props.onChange || (() => {}))(null)}\n            }\n            );\n        }\n        \n        onSearchStringChange = e => this.setState({searchString: e.target.value, highlightIndex: null});\n        \n        //Memoized Once\n        getMenuOptions = (() => {\n            let cachedSearchString = '';\n            let cachedOptions = [];\n            let cachedValue = [];\n            return (\n                searchString = '', options = []\n            ) => {\n                if(\n                    searchString === cachedSearchString\n                    && cachedOptions === options\n                    ) {\n                        return cachedValue;\n                    }\n                     else {\n                        cachedSearchString = searchString;\n                        cachedOptions = options;\n                        cachedValue = options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase()))\n                        return cachedValue;\n                     }\n            };\n        })();\n\n        getIndexOfSelectedMenuOptionOrNull = (searchStringForward) => this.getMenuOptions(searchStringForward, this.props.options).findIndex(o => o.value === this.state.selected) || null;\n\n        onInputKeyDown = e => {\n            const eKey = e.key;\n            if(eKey === 'ArrowDown' || eKey === 'ArrowUp') {\n                this.setState(({highlightIndex}) => {\n                    let nextIndex = 0;\n                    if(highlightIndex !== null){\n                        if(eKey === 'ArrowDown') {\n                            nextIndex = highlightIndex + 1;\n                        }\n                        if(eKey === 'ArrowUp') {\n                            nextIndex = highlightIndex - 1;\n                        }\n                    }\n                    if(nextIndex < 0) {\n                        nextIndex = 0;\n                    }\n                    const menuOptionsLength = this.getMenuOptions(this.state.searchString, this.props.options).length;\n                    if(nextIndex >= menuOptionsLength) {\n                        nextIndex = menuOptionsLength - 1;\n                    }\n                    \n                    return {highlightIndex: nextIndex};\n                }, () => {\n                    if(this.state.highlightIndex !== null && this.highlightedRef.current) {\n                        this.highlightedRef.current.parentNode.scrollTop =this.highlightedRef.current.offsetTop;\n                    }\n                });\n                e.preventDefault();\n            }\n            if(eKey === 'Enter') {\n                const menuOptions = this.getMenuOptions(this.state.searchString, this.props.options);\n                if(this.state.highlightIndex !== null && this.state.highlightIndex >= 0 && this.state.highlightIndex < menuOptions.length) {\n                    const selectedOption = this.getMenuOptions(this.state.searchString, this.props.options)[this.state.highlightIndex];\n                    this.selectableMenuOption(selectedOption.value)();\n                    this.inputRef.current.blur();\n                    e.preventDefault();\n                } else {\n                    this.setState({highlightIndex: 0});\n                    e.preventDefault();\n                }\n            }\n            if(eKey === 'Escape') {\n                this.setState({\n                    menuOpen: false,\n                    searchString: '',\n                    highlightIndex: null\n                }, () => {\n                    if(this.inputRef.current){this.inputRef.current.blur();}\n                }\n                );\n                e.preventDefault();\n            }\n        }\n\n        selectedAndOrHighlightedRef = (selected, highlighted) => {\n            if(selected || highlighted) {\n                return {ref: \n                    mergeRefs(...[\n                        ...(selected ? [(target) => {\n                            if(target !== null) {\n                                target.parentNode.scrollTop = target.offsetTop;\n                            } // virtual ref isn't actually stored anywhere\n                        }] : []),\n                        ...(highlighted ? [this.highlightedRef] : [])\n                    ])};\n            } else {\n                return {}\n            }\n            \n        }\n\n        render() {\n            const {\n                options = [],\n                placeholder = 'Select...',\n                clearable = true,\n                searchable = true,\n                noIndicators = false,\n                onChange: ignored, // strip out\n                forwardedRef,\n                ...rest\n            } = this.props;\n\n            const menuOptions = this.getMenuOptions(this.state.searchString, options)\n            .map(({value, label}, i) => (\n                <MenuOption \n                    className={(value === this.state.selected ? 'selected' : '') + (i === this.state.highlightIndex ? ' highlighted' : '')}\n                    data-value={value} // I'm here for dev tool visibility\n                    onClick={this.selectableMenuOption(value)}\n                    key={`${value}-${i}`}\n                    {...this.selectedAndOrHighlightedRef(value === this.state.selected, i === this.state.highlightIndex)}\n                >\n                    {label}\n                </MenuOption>));\n\n            return (\n                <Wrapper ref={this.wrapperRef}>\n                    <Stage {...rest}>\n                        <ValueContainer\n                            menuOpen={this.state.menuOpen}\n                            toggleMenu={this.toggleMenu}\n                            selected={this.state.selected}\n                            options={options}\n                            placeholder={placeholder}\n                            searchable={searchable}\n                            onChange={this.onSearchStringChange}\n                            onKeyDown={this.onInputKeyDown}\n                            searchString={this.state.searchString}\n                            ref={this.inputRef}\n                        />\n                        {!noIndicators && <IndicatorContainer\n                            selected={this.state.selected}\n                            clearable={clearable}\n                            clearSelection={this.clearSelection}\n                            toggleMenu={this.toggleMenu}\n                        />}\n                    </Stage>\n                    <Menu\n                        menuOpen={this.state.menuOpen}\n                        menuOptions={menuOptions}\n                        options={options}\n                    />\n                </Wrapper>);\n        }\n    }\n    YSelectComponent.displayName = 'YSelect';\n    return outsideClick(YSelectComponent);\n}\n\nexport default ThemableYSelect();"],"sourceRoot":""}