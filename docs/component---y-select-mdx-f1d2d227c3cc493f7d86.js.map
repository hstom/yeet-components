{"version":3,"sources":["webpack:///../src/YBasic/YSelect/YSelect.js?9773","webpack:///../YSelect.mdx","webpack:///../src/YBasic/YSelect/YSelectDisplayContainer.js","webpack:///../src/YBasic/YSelect/YSelectSVGs.js","webpack:///../src/YBasic/YSelect/YSelectIndicatorContainer.js","webpack:///../src/YBasic/YSelect/YSelectMenuContainer.js","webpack:///../src/YBasic/YSelect/YSelect.js","webpack:///../src/YBasic/YSelect/UncontrolledYSelect.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","UncontrolledYSelect","SourceDisplay","source","clearable","placeholder","searchable","noIndicators","options","Array","fill","map","_","i","value","label","onChange","alert","isMDXComponent","genSubcomponent","getGenericThemableSubcomponentBuilder","globalTheme","ThemableYSelectDisplayContainer","DisplayContainer","DisplayPlaceholder","DisplaySingleValue","DisplayInputWrapper","DisplayInputStage","DisplayInput","Tag","forwardRef","YSelectDisplayComponent","yPlaceholder","ySingleValue","yInputWrapper","yInputStage","yInput","yChild","menuOpen","toggleMenu","selected","tabindex","searchString","forwardedRef","onKeyDown","rest","onClick","Object","o","autoCapitalize","autoComplete","autoCorrect","spellCheck","tabIndex","type","aria-autocomplete","ref","onFocus","e","style","opacity","clearablePath","dropdownPath","ThemableYSelectIndicatorContainer","IndicatorContainer","IndicatorSeparator","IndicatorClearable","IndicatorClearableSVG","propMutator","height","width","viewBox","focusable","children","d","IndicatorDropdown","IndicatorDropdownSVG","yClearable","yClearableSVG","ySeparator","yDropdown","yDropdownSVG","clearSelection","aria-label","ThemableYSelectMenuOption","ThemableYSelectMenuContainer","Menu","MenuList","MenuEmpty","YSelectMenuComponent","yList","yEmpty","menuOptions","ThemableYSelect","YSelectComponent","yWrapper","yDisplay","yIndicators","yMenu","yOption","Wrapper","useMemo","Stage","MenuOption","useState","setMenuOpen","setSearchString","kbIndex","setKbIndex","wrapperRef","useRef","inputRef","closeMenu","useClickOutsideHandler","useCallback","filteredOptions","scrollBack","node","lastKeyTime","Date","onArrow","eKey","keyTime","nextIndex","setTimeout","console","keyHandlers","ArrowDown","ArrowUp","Enter","selectedValue","Escape","className","data-value","key","ThemableUncontrolledYSelect","YSelect","UncontrolledYSelectComponent","setSelected","useImperativeHandle","v","React"],"mappings":"iMAAe,2+O,oSCUR,IAAMA,EAAe,Q,4JAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,gDACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,qDACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,ygBAAkiBC,QAAS,CAC5kBJ,QACAH,kBACAQ,eACAC,wBACAC,kBACAC,UACCP,QAAQ,cACT,YAACK,EAAA,EAAD,CAAqBG,WAAW,EAAmBC,YAAa,YAA0BC,YAAY,EAAmBC,cAAc,EAAoBC,QAASC,MAAM,KACzKC,OAAOC,KAAI,SAACC,EAAGC,GAAJ,MAAW,CACrBC,MAAOD,EACPE,OAAUF,EAAI,GAAK,EAAI,IAAM,MAAU,EAAJA,EAAQ,GAAK,EAAI,KAAO,OAAOA,EAAI,GAAK,EAAI,IAAMA,EAAI,GAAK,EAAI,IAAM,SACrGG,SAAU,SAAAF,GAAK,OAAIG,MAAM,MAAMH,EAAP,eAC3BlB,QAAQ,yBAEZ,iBAAQ,CACN,GAAM,UADR,UAGA,YAACM,EAAA,EAAD,CAAeC,OAAQA,EAAQP,QAAQ,mB,mJAK3CH,EAAWyB,gBAAiB,G,sUCvD5B,IAAMC,EAAkBC,YAAsC,oBAAoB,SAAAC,GAAW,OAAMA,UAAD,aAAL,MAiBhFC,EAAkC,SAAAD,GAC3C,IAAME,EAAmBJ,eAAzB,GACMK,EAAqBL,iBAA3B,GACMM,EAAqBN,kBAA3B,GAEMO,EAAsBP,mBAA5B,GACMQ,EAAoBR,iBAA1B,GACMS,EAAeT,EAAgB,QAAS,CAACU,IAAD,QAAeC,YAAY,GAApDX,CAArB,GAEMY,EAA0B,SAAC,GAAD,qBAC5BC,OAD4B,4BAE5BC,OAF4B,6BAG5BC,OAH4B,2BAI5BC,OAJ4B,sBAK5BC,OAL4B,sBAM5BC,OAN4B,WAS5BC,EAT4B,WAU5BC,EAV4B,aAW5BC,EAX4B,WAY5BhC,EAZ4B,UAa5BH,EAb4B,cAc5BC,EAd4B,0BAe5BmC,OAf4B,YAgB5BC,EAhB4B,eAiB5BC,EAjB4B,eAkB5B3B,EAlB4B,WAmB5B4B,EAnB4B,YAoBzBC,E,oIApByB,mOAqBzB,iBACHC,QAASP,GADN,KAYAjC,GAAF,KACIkC,QACC,cACMO,mBADN,GADDP,GAMC,cACMO,mBADN,GAGGvC,EAAA,QAAe,SAAAwC,GAAC,OAAIA,UAAJ,KAAhB,GAtBN,QAyBH,gBAGI,gBAGI,sBAEIC,eAFJ,OAGIC,aAHJ,MAIIC,YAJJ,MAKIC,WALJ,QAMIC,SANJ,EAOIC,KAPJ,OAQIC,oBARJ,OASIzC,MATJ,EAUI0C,IAVJ,EAWIxC,SAXJ,EAYI4B,UAZJ,EAaIa,QAAS,WACL,GACIlB,KAGRO,QAAS,YAA6B,OAArBY,qBAA4B,GAC7CC,MAAO,CAACC,QAAUtD,GAAD,MAAiC,YAOlE,OADAyB,wCACO,gBAAiB,cACpB,OAAO,sBAAoCY,aAAca,S,oZAIlDlC,QClHFuC,EAAN,6V,kVACA,IAAMC,EAAN,wR,+hBCIP,IAAM3C,EAAkBC,YAAsC,sBAAsB,SAAAC,GAAW,OAAMA,UAAD,aAAL,MAElF0C,EAAoC,SAAA1C,GAC7C,IAAM2C,EAAqB7C,eAA3B,GACM8C,EAAqB9C,eAA3B,GACM+C,EAAqB,EAAgB,YAAa,CAACrC,IAAK,UAAnC,CAA3B,GACMsC,EAAwB,EAAgB,gBAAiB,CAC3DtC,IAD2D,MAE3DuC,YAAa,iBAAO,CAChBC,OADgB,OAEhBC,MAFgB,OAGhBC,QAHgB,YAIhB,eAJgB,EAKhBC,WALgB,EAMhBC,SAAU,oBAAMC,EAAGb,OARG,CAA9B,GAWMc,EAAoB,EAAgB,WAAY,CAAC9C,IAAK,UAAlC,CAA1B,GACM+C,EAAuB,EAAgB,eAAgB,CACzD/C,IADyD,MAEzDuC,YAAa,iBAAO,CAChBC,OADgB,OAEhBC,MAFgB,OAGhBC,QAHgB,YAIhB,eAJgB,EAKhBC,WALgB,EAMhBC,SAAU,oBAAMC,EAAGZ,OARE,CAA7B,GAYA,OAAO,+BACHe,OADG,6BAEHC,OAFG,0BAGHC,OAHG,yBAIHC,OAJG,4BAKHC,OALG,WAOHzC,EAPG,WAQHpC,EARG,YASH8E,EATG,iBAUH3C,EAVG,aAWAM,E,oIAXA,uIAYA,gBACFzC,UAAcoC,GAAsB,sBAEjCM,QAFiC,EAGjCqC,aAAW,oBAEX,cAND,IASH,cATG,GAUH,sBAAkCrC,QAAlC,EAAuDqC,aAAW,cAC9D,cAvBD,O,4ZC/BX,IAAMhE,EAAkBC,YAAsC,iBAAiB,SAAAC,GAAW,OAAMA,UAAD,aAAL,MAE7E+D,EAA4BjE,EAAgB,SAAU,CAACW,YAAY,S,qZAEzE,IAAMuD,EAA+B,SAAAhE,GACxC,IAAMiE,EAAOnE,IAAb,GACMoE,EAAWpE,UAAjB,GACMqE,EAAYrE,WAAlB,GAEMsE,EAAuB,SAAC,GAAD,cACzBC,OADyB,sBAEzBC,OAFyB,WAIzBrD,EAJyB,WAKzBsD,EALyB,cAMzBpF,EANyB,UAOtBqC,E,oIAPsB,iEAQtBP,GAAY,gBACf,gBAEQsD,WAEM,gBAAwBpF,4BAbb,iBAmB7B,OADAiF,qCACOA,G,wYAGIJ,I,uXC5Bf,IAAMlE,EAAkBC,YAAsC,YAAY,SAAAC,GAAW,OAAMA,UAAD,aAAL,MAMxEwE,EAAkB,SAAAxE,GAC3B,IAAMyE,EAAmB,SAAC,GAenB,IAAD,IAdFC,gBAcE,MAdO,GAcP,MAbFC,gBAaE,MAbO,GAaP,MAZFC,mBAYE,MAZU,GAYV,MAXFC,MAAQC,GAWN,aAXyB,GAWzB,GAXMA,QAAYD,EAWlB,qBATF1F,eASE,MATQ,GASR,MARFH,mBAQE,MARY,YAQZ,MAPFD,iBAOE,aANFE,kBAME,aALFC,oBAKE,SAJFiC,EAIE,EAJFA,SACAxB,EAGE,EAHFA,SAEG6B,GACD,EAFFF,aAEE,yJAEIyD,EAAUC,mBAAQ,kBAAM,EAAgB,GAAI,CAACvE,YAAY,GAAjC,CAAN,KAAxB,IACMwE,EAAQD,mBAAQ,kBAAMlF,WAAN,KAAtB,IAEMI,EAAmB8E,mBAAQ,kBAAM/E,EAAN,KAAjC,IACM0C,EAAqBqC,mBAAQ,kBAAMtC,EAAN,KAAnC,IAEMuB,EAAOe,mBAAQ,kBAAMhB,EAAN,KAArB,IACMkB,EAAaF,mBAAQ,kBAAMjB,EAAN,KAA3B,IATE,EAW8BoB,oBAX9B,GAWKlE,EAXL,KAWemE,EAXf,OAYsCD,mBAZtC,IAYK9D,EAZL,KAYmBgE,EAZnB,OAa4BF,mBAb5B,MAaKG,EAbL,KAacC,EAbd,KAeIC,EAAaC,mBACbC,EAAWD,mBAEXE,EAAY,WACdP,MAAoBC,MAAqBE,SAG7CK,YAAuBJ,EAAYK,uBAAY,WACxC5E,GACC0E,MAEL,CAJHC,KAMA,IAAME,EAAkBd,mBACpB,kBAAM7F,EAAA,QAAe,2BAAaO,uBAA6B2B,EAA1C,oBACrB,CAACA,EAFL,IAKM0E,EAAaF,uBAAY,SAAAG,GAC3B,OAAGA,IACIA,EAAH,uBACIA,2BAEAA,uBAA4BA,EAA5BA,aALZ,IAUMC,GAAcR,kBAAO,IAAIS,MAA/B,WAEMC,GAAU,SAAAC,GACZ,IAAMC,GAAU,IAAIH,MAApB,UACA,GAAIG,EAAUJ,GAAX,QAAH,GAAyC,CACrC,IAAIK,EAAJ,EACA,OAAGhB,IACC,cAAGc,IACCE,EAAYhB,EAAZgB,GAEJ,YAAGF,IACCE,EAAYhB,EAAZgB,IAGLA,EAAH,IACIA,EAAYR,SAAZQ,GAEDA,GAAaR,EAAhB,SACIQ,KAEDhB,IAAH,GACIiB,YAAW,kBAAMhB,EAAN,KAAXgB,GAEJN,kBAEAO,YADG,YAILC,GAAc,CAChBC,UADgB,GAEhBC,QAFgB,GAGhBC,MAAO,WACH,GAAGtB,UAAoBA,GAApBA,GAAoCA,EAAUQ,EAAjD,OAAyE,CACrE,IAAMe,EAAgBf,KAAtB,MACAH,IACAhG,KACA+F,WAAoBA,UAApBA,YAEAH,MAGRuB,OAAQ,WACJnB,MAWFzE,GAAa,WACZD,EACC0E,KAEAP,MACAM,WAAoBA,UAApBA,UAIF7B,GAAiBgC,uBAAY,WAC/B,OAAgB1E,GAEZxB,UAEL,CAACwB,EALJ,IASMoD,GAAcS,mBAAQ,kBAAMc,EAAA,KACzB,kBAAErG,EAAF,QAASC,EAAT,eACD,sBAEIqH,WAAYtH,iBAAD,KAA0CD,qBAFzD,IAGIwH,aAHJ,EAIIvF,QAAS,WAAOkE,IAAaxE,OAAsBxB,EAAtBwB,IAC7B8F,IAAQxH,EAAL,IAAcD,GAEb,cACI,OAAI2B,GAAD,OAAamE,GAAhB,EACW,CAACnD,IAAK4D,GAEP,GAJd,CAMGtG,IAPH,EAOuBD,IAb/B,IADC,QAkBgB,CAACsG,EAAgB,EAAjB,MAnBzB,IAqBA,OACI,sBAAuB3D,IAAKqD,IACxB,gBACI,sBAEIvE,SAFJ,EAGIC,WAHJ,GAIIC,SAJJ,EAKIhC,QALJ,EAMIH,YANJ,EAOIC,WAPJ,EAQIU,SAlCa,SAAA0C,GAAC,OAAIgD,EAAgBhD,SAApB,QAmCdd,UA3DO,SAAAc,GACnB,IAAM+D,EAAO/D,EAAb,IACGoE,GAAH,KACIA,SACApE,qBAwDQhB,aAVJ,EAWIc,IAAKuD,MAEPxG,GAAgB,sBAEdiC,SAFc,EAGdpC,UAHc,EAId8E,eAJc,GAKd3C,WAAYA,OAGpB,sBAEID,SAFJ,EAGIsD,YAHJ,GAIIpF,QAASA,OAMzB,OADAsF,wBACOA,Q,uWAIID,K,mTCpMR,IAAM0C,EAA8B,SAAAlH,GAEvC,IAAMmH,EAAU3C,YAAhB,GAEM4C,EAA+B,SAAC,EAAD,GAAgC,IAA9BzH,EAA6B,EAA7BA,SAAarB,E,oIAAgB,mBAChC6G,mBADgC,MACzDhE,EADyD,KAC/CkG,EAD+C,KAEhEC,8BAAoBnF,GAAK,iBAAO,CAC5B1C,MAAO0B,KACP,CAFJmG,IASA,OAAQ,iBACJnG,SADI,EAEJxB,SAPiB,SAAA4H,GACjBF,KACA1H,OAGJ,KAOJ,OADAyH,oCACOI,eAAP,I,oYAIWN","file":"component---y-select-mdx-f1d2d227c3cc493f7d86.js","sourcesContent":["export default \"import React, { useState, useRef, useMemo, useCallback } from 'react';\\nimport {getGenericThemableSubcomponentBuilder, useClickOutsideHandler} from '../../util.js';\\nimport {ThemableYSelectDisplayContainer} from './YSelectDisplayContainer.js';\\nimport {ThemableYSelectIndicatorContainer} from './YSelectIndicatorContainer.js';\\nimport {ThemableYSelectMenuContainer, ThemableYSelectMenuOption} from './YSelectMenuContainer.js';\\nimport './YSelectComponents.css';\\n\\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\\n\\n/**\\n * TODO LIST:\\n * close menu on input ref blur\\n */\\nexport const ThemableYSelect = globalTheme =>  {\\n    const YSelectComponent = ({\\n        yWrapper={},\\n        yDisplay={},\\n        yIndicators={},\\n        yMenu: {yOption, ...yMenu}={},\\n        \\n        options = [],\\n        placeholder = 'Select...',\\n        clearable = true,\\n        searchable = true,\\n        noIndicators = false,\\n        selected,\\n        onChange,\\n        forwardedRef,\\n        ...rest\\n    }) => {\\n\\n        const Wrapper = useMemo(() => genSubcomponent('', {forwardRef: true})(globalTheme), []);\\n        const Stage = useMemo(() => genSubcomponent('stage')(globalTheme), []);\\n\\n        const DisplayContainer = useMemo(() => ThemableYSelectDisplayContainer(globalTheme), []);\\n        const IndicatorContainer = useMemo(() => ThemableYSelectIndicatorContainer(globalTheme), []);\\n\\n        const Menu = useMemo(() => ThemableYSelectMenuContainer(globalTheme), []);\\n        const MenuOption = useMemo(() => ThemableYSelectMenuOption(globalTheme), []);\\n\\n        const [menuOpen, setMenuOpen] = useState(false);\\n        const [searchString, setSearchString] = useState('');\\n        const [kbIndex, setKbIndex] = useState(null);\\n\\n        const wrapperRef = useRef();\\n        const inputRef = useRef();\\n\\n        const closeMenu = () => {\\n            setMenuOpen(false); setSearchString(''); setKbIndex(null);\\n        }\\n\\n        useClickOutsideHandler(wrapperRef, useCallback(() => {\\n            if(menuOpen) {\\n                closeMenu();\\n            }\\n        }, [menuOpen]));\\n\\n        const filteredOptions = useMemo(\\n            () => options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase())),\\n            [searchString, options]\\n        );\\n\\n        const scrollBack = useCallback(node => {\\n            if(node !== null) { // TODO add necessity check\\n                if(node.scrollIntoViewIfNeeded) {\\n                    node.scrollIntoViewIfNeeded();\\n                } else {\\n                    node.parentNode.scrollTop = node.offsetTop;\\n                }\\n            }\\n        }, []);\\n\\n        const lastKeyTime = useRef(new Date().getTime());\\n\\n        const onArrow = eKey => {\\n            const keyTime = new Date().getTime();\\n            if((keyTime - lastKeyTime.current) > 30) {\\n                let nextIndex = 0;\\n                if(kbIndex !== null){\\n                    if(eKey === 'ArrowDown') {\\n                        nextIndex = kbIndex + 1;\\n                    }\\n                    if(eKey === 'ArrowUp') {\\n                        nextIndex = kbIndex - 1;\\n                    }\\n                }\\n                if(nextIndex < 0) {\\n                    nextIndex = filteredOptions.length - 1;\\n                }\\n                if(nextIndex >= filteredOptions.length) {\\n                    nextIndex = 0;\\n                }\\n                if(kbIndex !== nextIndex){\\n                    setTimeout(() => setKbIndex(nextIndex), 0);\\n                }\\n                lastKeyTime.current = keyTime;\\n            } else {\\n                console.log('skipped'); // remove throttler?\\n            }\\n        }\\n        const keyHandlers = {\\n            ArrowDown: onArrow,\\n            ArrowUp: onArrow,\\n            Enter: () => {\\n                if(kbIndex !== null && kbIndex >= 0 && kbIndex < filteredOptions.length) {\\n                    const selectedValue = filteredOptions[kbIndex].value;\\n                    closeMenu();\\n                    onChange(selectedValue);\\n                    inputRef.current && inputRef.current.blur();\\n                } else {\\n                    setKbIndex(0);\\n                }\\n            },\\n            Escape: () => {\\n                closeMenu();\\n            }\\n        }\\n        const onInputKeyDown = e => {\\n            const eKey = e.key;\\n            if(keyHandlers[eKey]) {\\n                keyHandlers[eKey](eKey);\\n                e.preventDefault();\\n            }\\n        }\\n\\n        const toggleMenu = () => {\\n            if(menuOpen) {\\n                closeMenu();\\n            } else {\\n                setMenuOpen(true);\\n                inputRef.current && inputRef.current.focus();\\n            }\\n        }\\n\\n        const clearSelection = useCallback(() => {\\n            const wasNull = selected === null;\\n            if(!wasNull) {\\n                onChange(null);\\n            }\\n        }, [selected, onChange]);\\n\\n        const onSearchStringChange = e => setSearchString(e.target.value);\\n\\n        const menuOptions = useMemo(() => filteredOptions  // TODO memoize\\n            .map(({value, label}, i) => (\\n                <MenuOption\\n                    {...yOption}\\n                    className={(value === selected ? 'selected' : '') + (i === kbIndex ? ' highlighted' : '')}\\n                    data-value={value} // I'm here for dev tool visibility\\n                    onClick={() => {closeMenu(); selected !== value && onChange(value);}}\\n                    key={`${value}-${i}`}\\n                    {...(\\n                        (selected, highlighted) => {\\n                            if((selected && kbIndex === null) || highlighted) {\\n                                return {ref: scrollBack};\\n                            } else {\\n                                return {}\\n                            }\\n                        })(value === selected, i === kbIndex)\\n                    }\\n                >\\n                    {label}\\n                </MenuOption>)), [filteredOptions, kbIndex, onChange, selected, yOption, scrollBack]);\\n\\n        return (\\n            <Wrapper {...yWrapper} ref={wrapperRef}>\\n                <Stage {...rest}>\\n                    <DisplayContainer\\n                        {...yDisplay}\\n                        menuOpen={menuOpen}\\n                        toggleMenu={toggleMenu}\\n                        selected={selected}\\n                        options={options}\\n                        placeholder={placeholder}\\n                        searchable={searchable}\\n                        onChange={onSearchStringChange}\\n                        onKeyDown={onInputKeyDown}\\n                        searchString={searchString}\\n                        ref={inputRef}\\n                    />\\n                    {!noIndicators && <IndicatorContainer\\n                        {...yIndicators}\\n                        selected={selected}\\n                        clearable={clearable}\\n                        clearSelection={clearSelection}\\n                        toggleMenu={toggleMenu}\\n                    />}\\n                </Stage>\\n                <Menu\\n                    {...yMenu}\\n                    menuOpen={menuOpen}\\n                    menuOptions={menuOptions}\\n                    options={options}\\n                />\\n            </Wrapper>);\\n    \\n    }\\n    YSelectComponent.displayName = 'YSelect';\\n    return YSelectComponent;\\n}\\n\\n\\nexport default ThemableYSelect();\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport UncontrolledYSelect from './src/YBasic/YSelect/UncontrolledYSelect.js';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/YBasic/YSelect/YSelect.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Quality: Sophistication`}</p>\n    <h1 {...{\n      \"id\": \"yselectcomponents\"\n    }}>{`YSelectComponents`}</h1>\n    <h2 {...{\n      \"id\": \"single-select\"\n    }}>{`Single Select`}</h2>\n    <p>{`i work with the keyboard too`}</p>\n    <Playground __position={0} __code={'<UncontrolledYSelect\\n  clearable={true || \\'default\\'}\\n  placeholder={\\'Select...\\' || \\'default\\'}\\n  searchable={true || \\'default\\'}\\n  noIndicators={false && \\'default\\'}\\n  options={Array(100) // array of {value, label}\\n    .fill()\\n    .map((_, i) => ({\\n      value: i,\\n      label: `${i % 2 == 0 ? \\'B\\' : \\'Z\\'}${(i * 7) % 3 == 0 ? \\'ee\\' : \\'oo\\'}${\\n        i % 3 == 0 ? \\'p\\' : i % 3 == 1 ? \\'m\\' : \\'k\\'\\n      }`,\\n    }))}\\n  onChange={\\n    value => alert(`Id ${value} selected!`)\\n    //() => {} // disable alert\\n  }\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      UncontrolledYSelect,\n      SourceDisplay,\n      source\n    }} mdxType=\"Playground\">\n      <UncontrolledYSelect clearable={true || 'default'} placeholder={'Select...' || 'default'} searchable={true || 'default'} noIndicators={false && 'default'} options={Array(100) // array of {value, label}\n      .fill().map((_, i) => ({\n        value: i,\n        label: `${i % 2 == 0 ? 'B' : 'Z'}${i * 7 % 3 == 0 ? 'ee' : 'oo'}${i % 3 == 0 ? 'p' : i % 3 == 1 ? 'm' : 'k'}`\n      }))} onChange={value => alert(`Id ${value} selected!`) //() => {} // disable alert\n      } mdxType=\"UncontrolledYSelect\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\n// import { clearablePath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select display', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n// export const ThemableYSelectMultiValueButton = genSubcomponent('multi button');\n// export const ThemableYSelectMultiValueLabel = genSubcomponent('multi button label');\n// export const ThemableYSelectMultiValueRemove = genSubcomponent('multi button remove');\n// export const ThemableYSelectMultiValueRemoveSVG = genSubcomponent('multi button remove svg', {\n//     Tag: 'svg',\n//     propMutator: () => ({\n//         height: '20px',\n//         width: '20px',\n//         viewBox: '0 0 20 20',\n//         'aria-hidden': true,\n//         focusable: false,\n//         children: <path d={clearablePath}></path>\n//     })\n// });\n\nexport const ThemableYSelectDisplayContainer = globalTheme => {\n    const DisplayContainer = genSubcomponent('container')(globalTheme);\n    const DisplayPlaceholder = genSubcomponent('placeholder')(globalTheme);\n    const DisplaySingleValue = genSubcomponent('single value')(globalTheme);\n\n    const DisplayInputWrapper = genSubcomponent('input wrapper')(globalTheme);\n    const DisplayInputStage = genSubcomponent('input stage')(globalTheme);\n    const DisplayInput = genSubcomponent('input', {Tag: 'input', forwardRef: true})(globalTheme);\n\n    const YSelectDisplayComponent = ({\n        yPlaceholder={},\n        ySingleValue={},\n        yInputWrapper={},\n        yInputStage={},\n        yInput={},\n        yChild={},\n\n\n        menuOpen,\n        toggleMenu,\n        selected,\n        options,\n        placeholder,\n        searchable,\n        tabindex = \"0\",\n        searchString,\n        forwardedRef,\n        onChange,\n        onKeyDown,\n        ...rest\n    }) => (<DisplayContainer\n        onClick={toggleMenu}\n        {...rest}\n    >\n        {/* <MultiValueButton>\n            <MultiValueLabel>\n                Goofy\n            </MultiValueLabel>\n            <MultiValueRemove>\n                <MultiValueRemoveSVG/>\n            </MultiValueRemove>\n        </MultiValueButton> */}\n        {!(searchable && menuOpen) &&\n            (selected == null\n            ? <DisplayPlaceholder\n                {...Object.assign({}, yChild, yPlaceholder)}\n            >\n                {placeholder}\n            </DisplayPlaceholder>\n            : <DisplaySingleValue\n                {...Object.assign({}, yChild, ySingleValue)}\n            >\n                {options.filter(o => o.value === selected)[0].label}\n            </DisplaySingleValue>\n        )}\n        <DisplayInputWrapper\n            {...yInputWrapper}\n        > \n            <DisplayInputStage\n             {...yInputStage}\n            >\n                <DisplayInput\n                    {...yInput}\n                    autoCapitalize='none'\n                    autoComplete='off'\n                    autoCorrect='off'\n                    spellCheck='false'\n                    tabIndex={tabindex}\n                    type='text'\n                    aria-autocomplete='list'\n                    value={searchString}\n                    ref={forwardedRef}\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    onFocus={() => {\n                        if(!menuOpen) {\n                            toggleMenu();\n                        }\n                    }} \n                    onClick={(e) => {e.stopPropagation(); return false;}}\n                    style={{opacity: (searchable && menuOpen) ? '1' : '0'}}\n                ></DisplayInput>\n            </DisplayInputStage>\n        </DisplayInputWrapper>\n    </DisplayContainer>);\n\n    YSelectDisplayComponent.displayName = 'YSelectDisplayContainer';\n    return React.forwardRef((props, ref) => {\n        return <YSelectDisplayComponent {...props} forwardedRef={ref} />;\n    });\n}\n\nexport default ThemableYSelectDisplayContainer();","export const clearablePath = \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\";\nexport const dropdownPath = \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\";","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\nimport { clearablePath, dropdownPath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select indicator', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelectIndicatorContainer = globalTheme => {\n    const IndicatorContainer = genSubcomponent('container')(globalTheme);\n    const IndicatorSeparator = genSubcomponent('separator')(globalTheme);\n    const IndicatorClearable = genSubcomponent('clearable', {Tag: 'button'})(globalTheme);\n    const IndicatorClearableSVG = genSubcomponent('clearable svg', {\n        Tag: 'svg',\n        propMutator: () => ({\n            height: '20px',\n            width: '20px',\n            viewBox: '0 0 20 20',\n            'aria-hidden': true,\n            focusable: false,\n            children: <path d={clearablePath}></path>\n        })\n    })(globalTheme);\n    const IndicatorDropdown = genSubcomponent('dropdown', {Tag: 'button'})(globalTheme);\n    const IndicatorDropdownSVG = genSubcomponent('dropdown svg', {\n        Tag: 'svg',\n        propMutator: () => ({\n            height: '20px',\n            width: '20px',\n            viewBox: '0 0 20 20',\n            'aria-hidden': true,\n            focusable: false,\n            children: <path d={dropdownPath}></path>\n        })\n    })(globalTheme);\n\n    return ({\n        yClearable={},\n        yClearableSVG={},\n        ySeparator={},\n        yDropdown={},\n        yDropdownSVG={},\n\n        selected,\n        clearable,\n        clearSelection,\n        toggleMenu,\n        ...rest\n    }) => (<IndicatorContainer {...rest}>\n        {clearable && (selected !== null) && <IndicatorClearable\n            {...yClearable}\n            onClick={clearSelection}\n            aria-label='clear selection'\n        >\n            <IndicatorClearableSVG {...yClearableSVG}/>\n        </IndicatorClearable>\n        }\n        <IndicatorSeparator {...ySeparator}/>\n        <IndicatorDropdown {...yDropdown} onClick={toggleMenu} aria-label='open menu'>\n            <IndicatorDropdownSVG {...yDropdownSVG}/>\n        </IndicatorDropdown>\n    </IndicatorContainer>);\n}","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select menu', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelectMenuOption = genSubcomponent('option', {forwardRef: true});\n\nexport const ThemableYSelectMenuContainer = globalTheme => {\n    const Menu = genSubcomponent()(globalTheme);\n    const MenuList = genSubcomponent('list')(globalTheme);\n    const MenuEmpty = genSubcomponent('empty')(globalTheme);\n\n    const YSelectMenuComponent = ({\n        yList={},\n        yEmpty={},\n\n        menuOpen,\n        menuOptions,\n        options,\n        ...rest\n    }) => (menuOpen && <Menu {...rest}>\n        <MenuList {...yList}>\n            {\n                menuOptions.length\n                    ? menuOptions\n                    : <MenuEmpty {...yEmpty}>{options.length ? 'No options match' : 'No options'}</MenuEmpty>\n            }\n        </MenuList>\n    </Menu>);\n\n    YSelectMenuComponent.displayName = 'YSelectMenuComponent';\n    return YSelectMenuComponent;\n}\n\nexport default ThemableYSelectMenuContainer();","import React, { useState, useRef, useMemo, useCallback } from 'react';\nimport {getGenericThemableSubcomponentBuilder, useClickOutsideHandler} from '../../util.js';\nimport {ThemableYSelectDisplayContainer} from './YSelectDisplayContainer.js';\nimport {ThemableYSelectIndicatorContainer} from './YSelectIndicatorContainer.js';\nimport {ThemableYSelectMenuContainer, ThemableYSelectMenuOption} from './YSelectMenuContainer.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n/**\n * TODO LIST:\n * close menu on input ref blur\n */\nexport const ThemableYSelect = globalTheme =>  {\n    const YSelectComponent = ({\n        yWrapper={},\n        yDisplay={},\n        yIndicators={},\n        yMenu: {yOption, ...yMenu}={},\n        \n        options = [],\n        placeholder = 'Select...',\n        clearable = true,\n        searchable = true,\n        noIndicators = false,\n        selected,\n        onChange,\n        forwardedRef,\n        ...rest\n    }) => {\n\n        const Wrapper = useMemo(() => genSubcomponent('', {forwardRef: true})(globalTheme), []);\n        const Stage = useMemo(() => genSubcomponent('stage')(globalTheme), []);\n\n        const DisplayContainer = useMemo(() => ThemableYSelectDisplayContainer(globalTheme), []);\n        const IndicatorContainer = useMemo(() => ThemableYSelectIndicatorContainer(globalTheme), []);\n\n        const Menu = useMemo(() => ThemableYSelectMenuContainer(globalTheme), []);\n        const MenuOption = useMemo(() => ThemableYSelectMenuOption(globalTheme), []);\n\n        const [menuOpen, setMenuOpen] = useState(false);\n        const [searchString, setSearchString] = useState('');\n        const [kbIndex, setKbIndex] = useState(null);\n\n        const wrapperRef = useRef();\n        const inputRef = useRef();\n\n        const closeMenu = () => {\n            setMenuOpen(false); setSearchString(''); setKbIndex(null);\n        }\n\n        useClickOutsideHandler(wrapperRef, useCallback(() => {\n            if(menuOpen) {\n                closeMenu();\n            }\n        }, [menuOpen]));\n\n        const filteredOptions = useMemo(\n            () => options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase())),\n            [searchString, options]\n        );\n\n        const scrollBack = useCallback(node => {\n            if(node !== null) { // TODO add necessity check\n                if(node.scrollIntoViewIfNeeded) {\n                    node.scrollIntoViewIfNeeded();\n                } else {\n                    node.parentNode.scrollTop = node.offsetTop;\n                }\n            }\n        }, []);\n\n        const lastKeyTime = useRef(new Date().getTime());\n\n        const onArrow = eKey => {\n            const keyTime = new Date().getTime();\n            if((keyTime - lastKeyTime.current) > 30) {\n                let nextIndex = 0;\n                if(kbIndex !== null){\n                    if(eKey === 'ArrowDown') {\n                        nextIndex = kbIndex + 1;\n                    }\n                    if(eKey === 'ArrowUp') {\n                        nextIndex = kbIndex - 1;\n                    }\n                }\n                if(nextIndex < 0) {\n                    nextIndex = filteredOptions.length - 1;\n                }\n                if(nextIndex >= filteredOptions.length) {\n                    nextIndex = 0;\n                }\n                if(kbIndex !== nextIndex){\n                    setTimeout(() => setKbIndex(nextIndex), 0);\n                }\n                lastKeyTime.current = keyTime;\n            } else {\n                console.log('skipped'); // remove throttler?\n            }\n        }\n        const keyHandlers = {\n            ArrowDown: onArrow,\n            ArrowUp: onArrow,\n            Enter: () => {\n                if(kbIndex !== null && kbIndex >= 0 && kbIndex < filteredOptions.length) {\n                    const selectedValue = filteredOptions[kbIndex].value;\n                    closeMenu();\n                    onChange(selectedValue);\n                    inputRef.current && inputRef.current.blur();\n                } else {\n                    setKbIndex(0);\n                }\n            },\n            Escape: () => {\n                closeMenu();\n            }\n        }\n        const onInputKeyDown = e => {\n            const eKey = e.key;\n            if(keyHandlers[eKey]) {\n                keyHandlers[eKey](eKey);\n                e.preventDefault();\n            }\n        }\n\n        const toggleMenu = () => {\n            if(menuOpen) {\n                closeMenu();\n            } else {\n                setMenuOpen(true);\n                inputRef.current && inputRef.current.focus();\n            }\n        }\n\n        const clearSelection = useCallback(() => {\n            const wasNull = selected === null;\n            if(!wasNull) {\n                onChange(null);\n            }\n        }, [selected, onChange]);\n\n        const onSearchStringChange = e => setSearchString(e.target.value);\n\n        const menuOptions = useMemo(() => filteredOptions  // TODO memoize\n            .map(({value, label}, i) => (\n                <MenuOption\n                    {...yOption}\n                    className={(value === selected ? 'selected' : '') + (i === kbIndex ? ' highlighted' : '')}\n                    data-value={value} // I'm here for dev tool visibility\n                    onClick={() => {closeMenu(); selected !== value && onChange(value);}}\n                    key={`${value}-${i}`}\n                    {...(\n                        (selected, highlighted) => {\n                            if((selected && kbIndex === null) || highlighted) {\n                                return {ref: scrollBack};\n                            } else {\n                                return {}\n                            }\n                        })(value === selected, i === kbIndex)\n                    }\n                >\n                    {label}\n                </MenuOption>)), [filteredOptions, kbIndex, onChange, selected, yOption, scrollBack]);\n\n        return (\n            <Wrapper {...yWrapper} ref={wrapperRef}>\n                <Stage {...rest}>\n                    <DisplayContainer\n                        {...yDisplay}\n                        menuOpen={menuOpen}\n                        toggleMenu={toggleMenu}\n                        selected={selected}\n                        options={options}\n                        placeholder={placeholder}\n                        searchable={searchable}\n                        onChange={onSearchStringChange}\n                        onKeyDown={onInputKeyDown}\n                        searchString={searchString}\n                        ref={inputRef}\n                    />\n                    {!noIndicators && <IndicatorContainer\n                        {...yIndicators}\n                        selected={selected}\n                        clearable={clearable}\n                        clearSelection={clearSelection}\n                        toggleMenu={toggleMenu}\n                    />}\n                </Stage>\n                <Menu\n                    {...yMenu}\n                    menuOpen={menuOpen}\n                    menuOptions={menuOptions}\n                    options={options}\n                />\n            </Wrapper>);\n    \n    }\n    YSelectComponent.displayName = 'YSelect';\n    return YSelectComponent;\n}\n\n\nexport default ThemableYSelect();","import React, {useState, useImperativeHandle} from 'react';\nimport {ThemableYSelect} from './YSelect.js';\n\n/**\n * This is only used to demo handling the state above the YSelect in YSelect.mdx\n */\nexport const ThemableUncontrolledYSelect = globalTheme => {\n\n    const YSelect = ThemableYSelect(globalTheme);\n\n    const UncontrolledYSelectComponent = ({onChange, ...props}, ref) => {\n        const [selected, setSelected] = useState(null);\n        useImperativeHandle(ref, () => ({\n            value: selected\n        }), [selected]);\n\n        const onChangeHook = v => {\n            setSelected(v);\n            onChange(v);\n        };\n\n        return (<YSelect\n            selected={selected}\n            onChange={onChangeHook}\n            {...props}\n        />);\n    }\n    UncontrolledYSelectComponent.displayName = 'UncontrolledYSelect';\n    return React.forwardRef(UncontrolledYSelectComponent);\n\n}\n\nexport default ThemableUncontrolledYSelect();"],"sourceRoot":""}