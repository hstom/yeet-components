{"version":3,"sources":["webpack:///../src/YBasic/YSelect/YSelect.js?9773","webpack:///../YSelect.mdx","webpack:///../src/YBasic/YSelect/YSelectValueContainer.js","webpack:///../src/YBasic/YSelect/YSelectSVGs.js","webpack:///../src/YBasic/YSelect/YSelectIndicatorContainer.js","webpack:///../src/YBasic/YSelect/YSelectMenuContainer.js","webpack:///../src/YBasic/YSelect/YSelect.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","State","Observe","YSelect","SourceDisplay","source","clearable","placeholder","searchable","noIndicators","options","Array","fill","map","_","i","value","label","onChange","alert","isMDXComponent","genSubcomponent","getGenericThemableSubcomponentBuilder","globalTheme","ThemableYSelectValueContainer","ValueContainer","ValuePlaceholder","ValueSingleValue","ValueInputWrapper","ValueInputStage","ValueInput","Tag","forwardRef","YSelectValueComponent","menuOpen","toggleMenu","selected","child","tabindex","searchString","forwardedRef","onKeyDown","rest","onClick","o","autoCapitalize","autoComplete","autoCorrect","spellCheck","tabIndex","type","aria-autocomplete","ref","onFocus","e","style","opacity","clearablePath","dropdownPath","ThemableYSelectIndicatorContainer","IndicatorContainer","IndicatorSeparator","IndicatorClearable","IndicatorClearableSVG","propMutator","height","width","viewBox","focusable","children","d","IndicatorDropdown","IndicatorDropdownSVG","clearSelection","aria-label","ThemableYSelectMenuOption","ThemableYSelectMenuContainer","Menu","MenuList","MenuEmpty","menuOptions","ThemableYSelect","Wrapper","Stage","MenuOption","YSelectComponent","cachedSearchString","cachedOptions","cachedValue","nextSearchString","Object","highlightIndex","wasntNull","eKey","nextIndex","menuOptionsLength","selectedOption","mergeRefs","target","highlighted","React","render","this","getMenuOptions","state","className","data-value","key","wrapperRef","inputRef","outsideClick"],"mappings":"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","file":"component---y-select-mdx-a8b188824751df5f9059.js","sourcesContent":["export default \"import React from 'react';\\nimport {getGenericThemableSubcomponentBuilder, mergeRefs, outsideClick} from '../../util.js';\\nimport {ThemableYSelectValueContainer} from './YSelectValueContainer.js';\\nimport {ThemableYSelectIndicatorContainer} from './YSelectIndicatorContainer.js';\\nimport {ThemableYSelectMenuContainer, ThemableYSelectMenuOption} from './YSelectMenuContainer.js';\\nimport './YSelectComponents.css';\\n\\n/**\\n * \\n * TODO LIST:\\n * remove this.state.selected and require orchestration\\n */\\n\\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\\n\\nexport const ThemableYSelect = globalTheme => {\\n    const Wrapper = genSubcomponent('', {forwardRef: true})(globalTheme);\\n    const Stage = genSubcomponent('stage')(globalTheme);\\n\\n    const ValueContainer = ThemableYSelectValueContainer(globalTheme);\\n    const IndicatorContainer = ThemableYSelectIndicatorContainer(globalTheme);\\n\\n    const Menu = ThemableYSelectMenuContainer(globalTheme);\\n    const MenuOption = ThemableYSelectMenuOption(globalTheme);\\n\\n    class YSelectComponent extends React.Component {\\n        constructor(props) {\\n            super(props);\\n\\n            this.wrapperRef = React.createRef();\\n            this.inputRef = React.createRef(); // TODO: replace with virtual ref that just focuses on bind, but how to tab in?\\n            this.highlightedRef = React.createRef();\\n\\n            this.state = {\\n                menuOpen: false,\\n                selected: null,\\n                searchString: '',\\n                highlightIndex: null\\n            }\\n        }\\n\\n        onOutsideClick = () => {\\n            if(this.state.menuOpen) {\\n                this.setState({\\n                    menuOpen: false,\\n                    searchString: ''\\n                },\\n                this.syncInputFocusState\\n                );\\n            };\\n        }\\n\\n        syncInputFocusState = () => {\\n            if(this.inputRef.current) {\\n                if(this.state.menuOpen) {\\n                    this.inputRef.current.focus();\\n                } else {\\n                    this.inputRef.current.blur();\\n                }\\n            }\\n        }\\n\\n        toggleMenu = () => {\\n            this.setState(\\n                ({menuOpen, searchString, ...rest}) => {\\n                    const nextSearchString = !menuOpen ? searchString : '';\\n                    return Object.assign(\\n                        {},\\n                        rest,\\n                        {\\n                            menuOpen: !menuOpen,\\n                            searchString: nextSearchString,\\n                            highlightIndex: this.getIndexOfSelectedMenuOptionOrNull(nextSearchString) // auto-highlight selected option\\n                        }\\n                    )\\n                },\\n                this.syncInputFocusState\\n        )};\\n\\n        selectableMenuOption = value => () => this.setState(\\n            {menuOpen: false, selected: value, searchString: '', highlightIndex: null}, () => (this.props.onChange || (() => {}))(value)\\n        );\\n        \\n\\n        clearSelection = () => {\\n            const wasntNull = this.state.selected !== null;\\n            this.setState({\\n                menuOpen: false,\\n                selected: null,\\n                searchString: '',\\n                highlightIndex: null\\n            }, () => {\\n                if(this.inputRef.current){this.inputRef.current.blur();}\\n                if(wasntNull){(this.props.onChange || (() => {}))(null)}\\n            }\\n            );\\n        }\\n        \\n        onSearchStringChange = e => this.setState({searchString: e.target.value, highlightIndex: null});\\n        \\n        //Memoized Once\\n        getMenuOptions = (() => {\\n            let cachedSearchString = '';\\n            let cachedOptions = [];\\n            let cachedValue = [];\\n            return (\\n                searchString = '', options = []\\n            ) => {\\n                if(\\n                    searchString === cachedSearchString\\n                    && cachedOptions === options\\n                    ) {\\n                        return cachedValue;\\n                    }\\n                     else {\\n                        cachedSearchString = searchString;\\n                        cachedOptions = options;\\n                        cachedValue = options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase()))\\n                        return cachedValue;\\n                     }\\n            };\\n        })();\\n\\n        getIndexOfSelectedMenuOptionOrNull = (searchStringForward) => this.getMenuOptions(searchStringForward, this.props.options).findIndex(o => o.value === this.state.selected) || null;\\n\\n        onInputKeyDown = e => {\\n            const eKey = e.key;\\n            if(eKey === 'ArrowDown' || eKey === 'ArrowUp') {\\n                this.setState(({highlightIndex}) => {\\n                    let nextIndex = 0;\\n                    if(highlightIndex !== null){\\n                        if(eKey === 'ArrowDown') {\\n                            nextIndex = highlightIndex + 1;\\n                        }\\n                        if(eKey === 'ArrowUp') {\\n                            nextIndex = highlightIndex - 1;\\n                        }\\n                    }\\n                    if(nextIndex < 0) {\\n                        nextIndex = 0;\\n                    }\\n                    const menuOptionsLength = this.getMenuOptions(this.state.searchString, this.props.options).length;\\n                    if(nextIndex >= menuOptionsLength) {\\n                        nextIndex = menuOptionsLength - 1;\\n                    }\\n                    \\n                    return {highlightIndex: nextIndex};\\n                }, () => {\\n                    if(this.state.highlightIndex !== null && this.highlightedRef.current) {\\n                        this.highlightedRef.current.parentNode.scrollTop =this.highlightedRef.current.offsetTop;\\n                    }\\n                });\\n                e.preventDefault();\\n            }\\n            if(eKey === 'Enter') {\\n                const menuOptions = this.getMenuOptions(this.state.searchString, this.props.options);\\n                if(this.state.highlightIndex !== null && this.state.highlightIndex >= 0 && this.state.highlightIndex < menuOptions.length) {\\n                    const selectedOption = this.getMenuOptions(this.state.searchString, this.props.options)[this.state.highlightIndex];\\n                    this.selectableMenuOption(selectedOption.value)();\\n                    this.inputRef.current.blur();\\n                    e.preventDefault();\\n                } else {\\n                    this.setState({highlightIndex: 0});\\n                    e.preventDefault();\\n                }\\n            }\\n            if(eKey === 'Escape') {\\n                this.setState({\\n                    menuOpen: false,\\n                    searchString: '',\\n                    highlightIndex: null\\n                }, () => {\\n                    if(this.inputRef.current){this.inputRef.current.blur();}\\n                }\\n                );\\n                e.preventDefault();\\n            }\\n        }\\n\\n        selectedAndOrHighlightedRef = (selected, highlighted) => {\\n            if(selected || highlighted) {\\n                return {ref: \\n                    mergeRefs(...[\\n                        ...(selected ? [(target) => {\\n                            if(target !== null) {\\n                                target.parentNode.scrollTop = target.offsetTop;\\n                            } // virtual ref isn't actually stored anywhere\\n                        }] : []),\\n                        ...(highlighted ? [this.highlightedRef] : [])\\n                    ])};\\n            } else {\\n                return {}\\n            }\\n            \\n        }\\n\\n        render() {\\n            const {\\n                options = [],\\n                placeholder = 'Select...',\\n                clearable = true,\\n                searchable = true,\\n                noIndicators = false,\\n                onChange: ignored, // strip out\\n                forwardedRef,\\n                ...rest\\n            } = this.props;\\n\\n            const menuOptions = this.getMenuOptions(this.state.searchString, options)\\n            .map(({value, label}, i) => (\\n                <MenuOption \\n                    className={(value === this.state.selected ? 'selected' : '') + (i === this.state.highlightIndex ? ' highlighted' : '')}\\n                    data-value={value} // I'm here for dev tool visibility\\n                    onClick={this.selectableMenuOption(value)}\\n                    key={`${value}-${i}`}\\n                    {...this.selectedAndOrHighlightedRef(value === this.state.selected, i === this.state.highlightIndex)}\\n                >\\n                    {label}\\n                </MenuOption>));\\n\\n            return (\\n                <Wrapper ref={this.wrapperRef}>\\n                    <Stage {...rest}>\\n                        <ValueContainer\\n                            menuOpen={this.state.menuOpen}\\n                            toggleMenu={this.toggleMenu}\\n                            selected={this.state.selected}\\n                            options={options}\\n                            placeholder={placeholder}\\n                            searchable={searchable}\\n                            onChange={this.onSearchStringChange}\\n                            onKeyDown={this.onInputKeyDown}\\n                            searchString={this.state.searchString}\\n                            ref={this.inputRef}\\n                        />\\n                        {!noIndicators && <IndicatorContainer\\n                            selected={this.state.selected}\\n                            clearable={clearable}\\n                            clearSelection={this.clearSelection}\\n                            toggleMenu={this.toggleMenu}\\n                        />}\\n                    </Stage>\\n                    <Menu\\n                        menuOpen={this.state.menuOpen}\\n                        menuOptions={menuOptions}\\n                        options={options}\\n                    />\\n                </Wrapper>);\\n        }\\n    }\\n    YSelectComponent.displayName = 'YSelect';\\n    return outsideClick(YSelectComponent);\\n}\\n\\nexport default ThemableYSelect();\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { State, Observe } from \"mdx-observable\";\nimport YSelect from './src/YBasic/YSelect/YSelect.js';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/YBasic/YSelect/YSelect.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <p>{`Quality: Sophistication`}</p>\n    <h1 {...{\n      \"id\": \"yselectcomponents\"\n    }}>{`YSelectComponents`}</h1>\n    <h2 {...{\n      \"id\": \"single-select\"\n    }}>{`Single Select`}</h2>\n    <p>{`i work with the keyboard too`}</p>\n    <Playground __position={0} __code={'<YSelect\\n  clearable={true || \\'default\\'}\\n  placeholder={\\'Select...\\' || \\'default\\'}\\n  searchable={true || \\'default\\'}\\n  noIndicators={false && \\'default\\'}\\n  options={Array(200) // array of {value, label}\\n    .fill()\\n    .map((_, i) => ({\\n      value: i,\\n      label: `${i % 2 == 0 ? \\'B\\' : \\'Z\\'}${(i * 7) % 3 == 0 ? \\'ee\\' : \\'oo\\'}${\\n        i % 3 == 0 ? \\'p\\' : i % 3 == 1 ? \\'m\\' : \\'k\\'\\n      }`,\\n    }))}\\n  onChange={\\n    value => alert(`Id ${value} selected!`)\\n    //() => {} // disable alert\\n  }\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      State,\n      Observe,\n      YSelect,\n      SourceDisplay,\n      source\n    }} mdxType=\"Playground\">\n      <YSelect clearable={true || 'default'} placeholder={'Select...' || 'default'} searchable={true || 'default'} noIndicators={false && 'default'} options={Array(200) // array of {value, label}\n      .fill().map((_, i) => ({\n        value: i,\n        label: `${i % 2 == 0 ? 'B' : 'Z'}${i * 7 % 3 == 0 ? 'ee' : 'oo'}${i % 3 == 0 ? 'p' : i % 3 == 1 ? 'm' : 'k'}`\n      }))} onChange={value => alert(`Id ${value} selected!`) //() => {} // disable alert\n      } mdxType=\"YSelect\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\n// import { clearablePath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select value', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\n// export const ThemableYSelectMultiValueButton = genSubcomponent('multi button');\n// export const ThemableYSelectMultiValueLabel = genSubcomponent('multi button label');\n// export const ThemableYSelectMultiValueRemove = genSubcomponent('multi button remove');\n// export const ThemableYSelectMultiValueRemoveSVG = genSubcomponent('multi button remove svg', {\n//     Tag: 'svg',\n//     propMutator: () => ({\n//         height: '20px',\n//         width: '20px',\n//         viewBox: '0 0 20 20',\n//         'aria-hidden': true,\n//         focusable: false,\n//         children: <path d={clearablePath}></path>\n//     })\n// });\n\nexport const ThemableYSelectValueContainer = globalTheme => {\n    const ValueContainer = genSubcomponent('container')(globalTheme);\n    const ValuePlaceholder = genSubcomponent('placeholder')(globalTheme);\n    const ValueSingleValue = genSubcomponent('single value')(globalTheme);\n\n    const ValueInputWrapper = genSubcomponent('input wrapper')(globalTheme);\n    const ValueInputStage = genSubcomponent('input stage')(globalTheme);\n    const ValueInput = genSubcomponent('input', {Tag: 'input', forwardRef: true})(globalTheme);\n\n    const YSelectValueComponent = ({\n        menuOpen,\n        toggleMenu,\n        selected,\n        options,\n        placeholder,\n        searchable,\n        child = {},\n        tabindex = \"0\",\n        searchString,\n        forwardedRef,\n        onChange,\n        onKeyDown,\n        ...rest\n    }) => (<ValueContainer\n        onClick={toggleMenu}\n        {...rest}\n    >\n        {/* <MultiValueButton>\n            <MultiValueLabel>\n                Goofy\n            </MultiValueLabel>\n            <MultiValueRemove>\n                <MultiValueRemoveSVG/>\n            </MultiValueRemove>\n        </MultiValueButton> */}\n        {!(searchable && menuOpen) &&\n            (selected == null\n            ? <ValuePlaceholder\n                {...child}\n            >\n                {placeholder}\n            </ValuePlaceholder>\n            : <ValueSingleValue\n                {...child}\n            >\n                {options.filter(o => o.value === selected)[0].label}\n            </ValueSingleValue>\n        )}\n        <ValueInputWrapper> \n            <ValueInputStage>\n                <ValueInput\n                    autoCapitalize='none'\n                    autoComplete='off'\n                    autoCorrect='off'\n                    spellCheck='false'\n                    tabIndex={tabindex}\n                    type='text'\n                    aria-autocomplete='list'\n                    value={searchString}\n                    ref={forwardedRef}\n                    onChange={onChange}\n                    onKeyDown={onKeyDown}\n                    onFocus={() => {\n                        if(!menuOpen) {\n                            toggleMenu();\n                        }\n                    }} \n                    onClick={(e) => {e.stopPropagation(); return false;}}\n                    style={{opacity: (searchable && menuOpen) ? '1' : '0'}}\n                ></ValueInput>\n            </ValueInputStage>\n        </ValueInputWrapper>\n    </ValueContainer>);\n\n    YSelectValueComponent.displayName = 'YSelectValueContainer';\n    return React.forwardRef((props, ref) => {\n        return <YSelectValueComponent {...props} forwardedRef={ref} />;\n    });\n}\n\nexport default ThemableYSelectValueContainer();","export const clearablePath = \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\";\nexport const dropdownPath = \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\";","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\nimport { clearablePath, dropdownPath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select indicator', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelectIndicatorContainer = globalTheme => {\n    const IndicatorContainer = genSubcomponent('container')(globalTheme);\n    const IndicatorSeparator = genSubcomponent('separator')(globalTheme);\n    const IndicatorClearable = genSubcomponent('clearable', {Tag: 'button'})(globalTheme);\n    const IndicatorClearableSVG = genSubcomponent('clearable svg', {\n        Tag: 'svg',\n        propMutator: () => ({\n            height: '20px',\n            width: '20px',\n            viewBox: '0 0 20 20',\n            'aria-hidden': true,\n            focusable: false,\n            children: <path d={clearablePath}></path>\n        })\n    })(globalTheme);\n    const IndicatorDropdown = genSubcomponent('dropdown', {Tag: 'button'})(globalTheme);\n    const IndicatorDropdownSVG = genSubcomponent('dropdown svg', {\n        Tag: 'svg',\n        propMutator: () => ({\n            height: '20px',\n            width: '20px',\n            viewBox: '0 0 20 20',\n            'aria-hidden': true,\n            focusable: false,\n            children: <path d={dropdownPath}></path>\n        })\n    })(globalTheme);\n\n    return ({\n        selected,\n        clearable,\n        clearSelection,\n        toggleMenu\n    }) => (<IndicatorContainer>\n        {clearable && (selected !== null) && <IndicatorClearable\n            onClick={clearSelection}\n            aria-label='clear selection'\n        >\n            <IndicatorClearableSVG/>\n        </IndicatorClearable>\n        }\n        <IndicatorSeparator/>\n        <IndicatorDropdown onClick={toggleMenu} aria-label='open menu'>\n            <IndicatorDropdownSVG/>\n        </IndicatorDropdown>\n    </IndicatorContainer>);\n}","import React from 'react';\nimport { getGenericThemableSubcomponentBuilder } from '../../util.js';\nimport './YSelectComponents.css';\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select menu', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelectMenuOption = genSubcomponent('option', {forwardRef: true});\n\nexport const ThemableYSelectMenuContainer = globalTheme => {\n    const Menu = genSubcomponent()(globalTheme);\n    const MenuList = genSubcomponent('list')(globalTheme);\n    const MenuEmpty = genSubcomponent('empty')(globalTheme);\n\n    const YSelectValueComponent = ({\n        menuOpen,\n        menuOptions,\n        options\n    }) => (menuOpen && <Menu>\n        <MenuList>\n            {\n                menuOptions.length\n                    ? menuOptions\n                    : <MenuEmpty>{options.length ? 'No options match' : 'No options'}</MenuEmpty>\n            }\n        </MenuList>\n    </Menu>);\n\n    YSelectValueComponent.displayName = 'YSelectMenuContainer';\n    return React.forwardRef((props, ref) => {\n        return <YSelectValueComponent {...props} forwardedRef={ref} />;\n    });\n}\n\nexport default ThemableYSelectMenuContainer();","import React from 'react';\nimport {getGenericThemableSubcomponentBuilder, mergeRefs, outsideClick} from '../../util.js';\nimport {ThemableYSelectValueContainer} from './YSelectValueContainer.js';\nimport {ThemableYSelectIndicatorContainer} from './YSelectIndicatorContainer.js';\nimport {ThemableYSelectMenuContainer, ThemableYSelectMenuOption} from './YSelectMenuContainer.js';\nimport './YSelectComponents.css';\n\n/**\n * \n * TODO LIST:\n * remove this.state.selected and require orchestration\n */\n\nconst genSubcomponent = getGenericThemableSubcomponentBuilder('y select', globalTheme => ((globalTheme.YBasic || {}).YSelect || {}));\n\nexport const ThemableYSelect = globalTheme => {\n    const Wrapper = genSubcomponent('', {forwardRef: true})(globalTheme);\n    const Stage = genSubcomponent('stage')(globalTheme);\n\n    const ValueContainer = ThemableYSelectValueContainer(globalTheme);\n    const IndicatorContainer = ThemableYSelectIndicatorContainer(globalTheme);\n\n    const Menu = ThemableYSelectMenuContainer(globalTheme);\n    const MenuOption = ThemableYSelectMenuOption(globalTheme);\n\n    class YSelectComponent extends React.Component {\n        constructor(props) {\n            super(props);\n\n            this.wrapperRef = React.createRef();\n            this.inputRef = React.createRef(); // TODO: replace with virtual ref that just focuses on bind, but how to tab in?\n            this.highlightedRef = React.createRef();\n\n            this.state = {\n                menuOpen: false,\n                selected: null,\n                searchString: '',\n                highlightIndex: null\n            }\n        }\n\n        onOutsideClick = () => {\n            if(this.state.menuOpen) {\n                this.setState({\n                    menuOpen: false,\n                    searchString: ''\n                },\n                this.syncInputFocusState\n                );\n            };\n        }\n\n        syncInputFocusState = () => {\n            if(this.inputRef.current) {\n                if(this.state.menuOpen) {\n                    this.inputRef.current.focus();\n                } else {\n                    this.inputRef.current.blur();\n                }\n            }\n        }\n\n        toggleMenu = () => {\n            this.setState(\n                ({menuOpen, searchString, ...rest}) => {\n                    const nextSearchString = !menuOpen ? searchString : '';\n                    return Object.assign(\n                        {},\n                        rest,\n                        {\n                            menuOpen: !menuOpen,\n                            searchString: nextSearchString,\n                            highlightIndex: this.getIndexOfSelectedMenuOptionOrNull(nextSearchString) // auto-highlight selected option\n                        }\n                    )\n                },\n                this.syncInputFocusState\n        )};\n\n        selectableMenuOption = value => () => this.setState(\n            {menuOpen: false, selected: value, searchString: '', highlightIndex: null}, () => (this.props.onChange || (() => {}))(value)\n        );\n        \n\n        clearSelection = () => {\n            const wasntNull = this.state.selected !== null;\n            this.setState({\n                menuOpen: false,\n                selected: null,\n                searchString: '',\n                highlightIndex: null\n            }, () => {\n                if(this.inputRef.current){this.inputRef.current.blur();}\n                if(wasntNull){(this.props.onChange || (() => {}))(null)}\n            }\n            );\n        }\n        \n        onSearchStringChange = e => this.setState({searchString: e.target.value, highlightIndex: null});\n        \n        //Memoized Once\n        getMenuOptions = (() => {\n            let cachedSearchString = '';\n            let cachedOptions = [];\n            let cachedValue = [];\n            return (\n                searchString = '', options = []\n            ) => {\n                if(\n                    searchString === cachedSearchString\n                    && cachedOptions === options\n                    ) {\n                        return cachedValue;\n                    }\n                     else {\n                        cachedSearchString = searchString;\n                        cachedOptions = options;\n                        cachedValue = options.filter(({label}) => label.toLowerCase().includes(searchString.toLowerCase()))\n                        return cachedValue;\n                     }\n            };\n        })();\n\n        getIndexOfSelectedMenuOptionOrNull = (searchStringForward) => this.getMenuOptions(searchStringForward, this.props.options).findIndex(o => o.value === this.state.selected) || null;\n\n        onInputKeyDown = e => {\n            const eKey = e.key;\n            if(eKey === 'ArrowDown' || eKey === 'ArrowUp') {\n                this.setState(({highlightIndex}) => {\n                    let nextIndex = 0;\n                    if(highlightIndex !== null){\n                        if(eKey === 'ArrowDown') {\n                            nextIndex = highlightIndex + 1;\n                        }\n                        if(eKey === 'ArrowUp') {\n                            nextIndex = highlightIndex - 1;\n                        }\n                    }\n                    if(nextIndex < 0) {\n                        nextIndex = 0;\n                    }\n                    const menuOptionsLength = this.getMenuOptions(this.state.searchString, this.props.options).length;\n                    if(nextIndex >= menuOptionsLength) {\n                        nextIndex = menuOptionsLength - 1;\n                    }\n                    \n                    return {highlightIndex: nextIndex};\n                }, () => {\n                    if(this.state.highlightIndex !== null && this.highlightedRef.current) {\n                        this.highlightedRef.current.parentNode.scrollTop =this.highlightedRef.current.offsetTop;\n                    }\n                });\n                e.preventDefault();\n            }\n            if(eKey === 'Enter') {\n                const menuOptions = this.getMenuOptions(this.state.searchString, this.props.options);\n                if(this.state.highlightIndex !== null && this.state.highlightIndex >= 0 && this.state.highlightIndex < menuOptions.length) {\n                    const selectedOption = this.getMenuOptions(this.state.searchString, this.props.options)[this.state.highlightIndex];\n                    this.selectableMenuOption(selectedOption.value)();\n                    this.inputRef.current.blur();\n                    e.preventDefault();\n                } else {\n                    this.setState({highlightIndex: 0});\n                    e.preventDefault();\n                }\n            }\n            if(eKey === 'Escape') {\n                this.setState({\n                    menuOpen: false,\n                    searchString: '',\n                    highlightIndex: null\n                }, () => {\n                    if(this.inputRef.current){this.inputRef.current.blur();}\n                }\n                );\n                e.preventDefault();\n            }\n        }\n\n        selectedAndOrHighlightedRef = (selected, highlighted) => {\n            if(selected || highlighted) {\n                return {ref: \n                    mergeRefs(...[\n                        ...(selected ? [(target) => {\n                            if(target !== null) {\n                                target.parentNode.scrollTop = target.offsetTop;\n                            } // virtual ref isn't actually stored anywhere\n                        }] : []),\n                        ...(highlighted ? [this.highlightedRef] : [])\n                    ])};\n            } else {\n                return {}\n            }\n            \n        }\n\n        render() {\n            const {\n                options = [],\n                placeholder = 'Select...',\n                clearable = true,\n                searchable = true,\n                noIndicators = false,\n                onChange: ignored, // strip out\n                forwardedRef,\n                ...rest\n            } = this.props;\n\n            const menuOptions = this.getMenuOptions(this.state.searchString, options)\n            .map(({value, label}, i) => (\n                <MenuOption \n                    className={(value === this.state.selected ? 'selected' : '') + (i === this.state.highlightIndex ? ' highlighted' : '')}\n                    data-value={value} // I'm here for dev tool visibility\n                    onClick={this.selectableMenuOption(value)}\n                    key={`${value}-${i}`}\n                    {...this.selectedAndOrHighlightedRef(value === this.state.selected, i === this.state.highlightIndex)}\n                >\n                    {label}\n                </MenuOption>));\n\n            return (\n                <Wrapper ref={this.wrapperRef}>\n                    <Stage {...rest}>\n                        <ValueContainer\n                            menuOpen={this.state.menuOpen}\n                            toggleMenu={this.toggleMenu}\n                            selected={this.state.selected}\n                            options={options}\n                            placeholder={placeholder}\n                            searchable={searchable}\n                            onChange={this.onSearchStringChange}\n                            onKeyDown={this.onInputKeyDown}\n                            searchString={this.state.searchString}\n                            ref={this.inputRef}\n                        />\n                        {!noIndicators && <IndicatorContainer\n                            selected={this.state.selected}\n                            clearable={clearable}\n                            clearSelection={this.clearSelection}\n                            toggleMenu={this.toggleMenu}\n                        />}\n                    </Stage>\n                    <Menu\n                        menuOpen={this.state.menuOpen}\n                        menuOptions={menuOptions}\n                        options={options}\n                    />\n                </Wrapper>);\n        }\n    }\n    YSelectComponent.displayName = 'YSelect';\n    return outsideClick(YSelectComponent);\n}\n\nexport default ThemableYSelect();"],"sourceRoot":""}