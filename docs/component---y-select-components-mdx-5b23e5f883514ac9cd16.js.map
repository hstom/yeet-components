{"version":3,"sources":["webpack:///../src/YBasic/YSelectComponents/YSelectSVGs.js","webpack:///../src/YBasic/YSelectComponents/YSelectValueContainer.js","webpack:///../src/YBasic/YSelectComponents/YSelectComponents.js","webpack:///../src/YBasic/YSelectComponents/YSelectComponents.js?0555","webpack:///../YSelectComponents.mdx"],"names":["clearablePath","dropdownPath","ThemableYSelectValueContainerWrapper","buildGenericThemableComponent","Tag","componentClassName","themeSelector","globalTheme","displayName","ThemableYSelectMultiValueButton","ThemableYSelectMultiValueLabel","ThemableYSelectMultiValueRemove","ThemableYSelectMultiValueRemoveSVG","propMutator","height","width","viewBox","focusable","children","d","ThemableYSelectValuePlaceholder","ThemableYSelectValueSingleValue","ThemableYSelectValueInputWrapper","ThemableYSelectValueInputStage","ThemableYSelectValueInput","forwardRef","ThemableYSelectValueContainer","ValueContainer","ValuePlaceholder","ValueSingleValue","ValueInputWrapper","ValueInputStage","ValueInput","YSelectValueComponent","menuOpen","toggleMenu","selected","options","placeholder","searchable","child","tabindex","searchString","forwardedRef","rest","onClick","o","autocapitalize","autocomplete","autocorrect","spellcheck","type","aria-autocomplete","value","ref","e","ThemableYSelectWrapper","ThemableYSelectStage","ThemableYSelectIndicatorContainer","ThemableYSelectIndicatorSeparator","ThemableYSelectIndicatorClearable","ThemableYSelectIndicatorClearableSVG","ThemableYSelectIndicatorDropdown","ThemableYSelectIndicatorDropdownSVG","ThemableYSelectMenu","ThemableYSelectMenuList","ThemableYSelectMenuOption","ThemableYSelectMenuEmpty","ThemableYSelect","Wrapper","Stage","IndicatorContainer","IndicatorSeparator","IndicatorClearable","IndicatorClearableSVG","IndicatorDropdown","IndicatorDropdownSVG","Menu","MenuList","MenuOption","MenuEmpty","YSelectComponent","Object","exitState","React","componentDidMount","document","this","componentWillUnmount","render","clearable","menuOptions","label","className","data-value","key","i","state","onChange","inputRef","clearSelection","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","State","Observe","YSelect","SourceDisplay","source","Array","fill","map","_","alert","isMDXComponent"],"mappings":"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","file":"component---y-select-components-mdx-5b23e5f883514ac9cd16.js","sourcesContent":["export const clearablePath = \"M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z\";\nexport const dropdownPath = \"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\";","import React from 'react';\nimport { buildGenericThemableComponent } from '../../util.js';\nimport { clearablePath } from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\n/**\n * VALUE REGION\n */\n\nexport const ThemableYSelectValueContainerWrapper = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-value-container',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueContainer || {}),\n    displayName: 'YSelectValueContainer'\n});\n\nexport const ThemableYSelectMultiValueButton = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-multi-value-button',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueButton || {}),\n    displayName: 'YSelectMutliValueButton'\n});\n\nexport const ThemableYSelectMultiValueLabel = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-multi-value-label',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueLabel || {}),\n    displayName: 'YSelectMutliValueLabel'\n});\n\nexport const ThemableYSelectMultiValueRemove = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-multi-value-remove',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueRemove || {}),\n    displayName: 'YSelectMutliValueRemove'\n});\n\nexport const ThemableYSelectMultiValueRemoveSVG = buildGenericThemableComponent({\n    Tag: 'svg',\n    componentClassName: 'y-select-multi-value-remove-svg',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).multiValueRemoveSVG || {}),\n    displayName: 'YSelectMutliValueRemoveSVG',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={clearablePath}></path>\n    })\n});\n\nexport const ThemableYSelectValuePlaceholder = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-value-placeholder',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valuePlaceholder || {}),\n    displayName: 'YSelectValuePlaceholder'\n});\n\nexport const ThemableYSelectValueSingleValue = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-value-single-value',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueSingleValue || {}),\n    displayName: 'YSelectValueSingleValue'\n});\n\n/**\n * INPUT REGION\n */\n\nexport const ThemableYSelectValueInputWrapper = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-value-input-wrapper',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueInputWrapper || {}),\n    displayName: 'YSelectValueInputWrapper'\n});\n\nexport const ThemableYSelectValueInputStage = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-value-input-stage',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueInputStage || {}),\n    displayName: 'YSelectValueInputStage'\n});\n\nexport const ThemableYSelectValueInput = buildGenericThemableComponent({\n    Tag: 'input',\n    componentClassName: 'y-select-value-input',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).valueInput || {}),\n    displayName: 'YSelectValueInput',\n    forwardRef: true\n});\n\nexport const ThemableYSelectValueContainer = globalTheme => {\n    const ValueContainer = ThemableYSelectValueContainerWrapper(globalTheme);\n    const ValuePlaceholder = ThemableYSelectValuePlaceholder(globalTheme);\n    const ValueSingleValue = ThemableYSelectValueSingleValue(globalTheme);\n\n    const ValueInputWrapper = ThemableYSelectValueInputWrapper(globalTheme);\n    const ValueInputStage = ThemableYSelectValueInputStage(globalTheme);\n    const ValueInput = ThemableYSelectValueInput(globalTheme);\n\n    const YSelectValueComponent = ({\n        menuOpen,\n        toggleMenu,\n        selected,\n        options,\n        placeholder,\n        searchable,\n        child = {},\n        tabindex = \"0\",\n        searchString,\n        forwardedRef,\n        ...rest\n    }) => (<ValueContainer\n        onClick={toggleMenu}\n        {...rest}\n    >\n        {/* <MultiValueButton>\n            <MultiValueLabel>\n                Goofy\n            </MultiValueLabel>\n            <MultiValueRemove>\n                <MultiValueRemoveSVG/>\n            </MultiValueRemove>\n        </MultiValueButton> */}\n        {!(searchable && menuOpen) &&\n            (selected == null\n            ? <ValuePlaceholder\n                {...child}\n            >\n                {placeholder}\n            </ValuePlaceholder>\n            : <ValueSingleValue\n                {...child}\n            >\n                {options.filter(o => o.value === selected)[0].label}\n            </ValueSingleValue>\n        )}\n        {(searchable && menuOpen) && \n            <ValueInputWrapper>\n                <ValueInputStage>\n                    <ValueInput\n                        autocapitalize='none'\n                        autocomplete='off'\n                        autocorrect='off'\n                        spellcheck='false'\n                        tabindex={tabindex}\n                        type='text'\n                        aria-autocomplete='list'\n                        value={searchString}\n                        ref={forwardedRef}\n                        onClick={(e) => {e.stopPropagation(); return false;}}\n                    ></ValueInput>\n                </ValueInputStage>\n            </ValueInputWrapper>\n        }\n    </ValueContainer>);\n\n    YSelectValueComponent.displayName = 'YSelectValueContainer';\n    return React.forwardRef((props, ref) => {\n        return <YSelectValueComponent {...props} forwardedRef={ref} />;\n    });\n}\n\nexport default ThemableYSelectValueContainer();","import React from 'react';\nimport { buildGenericThemableComponent } from '../../util.js';\nimport {ThemableYSelectValueContainer} from './YSelectValueContainer.js';\nimport {dropdownPath, clearablePath} from './YSelectSVGs.js';\nimport './YSelectComponents.css';\n\n/**\n * LAYOUT\n */\nexport const ThemableYSelectWrapper = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-wrapper',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).wrapper || {}),\n    displayName: 'YSelectWrapper',\n    forwardRef: true\n});\n\nexport const ThemableYSelectStage = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-stage',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).stage || {}),\n    displayName: 'YSelectStage'\n});\n\n/**\n * INDICATOR REGION\n */\n\nexport const ThemableYSelectIndicatorContainer = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-indicator-container',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorContainer || {}),\n    displayName: 'YSelectIndicatorContainer'\n});\n\nexport const ThemableYSelectIndicatorSeparator = buildGenericThemableComponent({\n    Tag: 'span',\n    componentClassName: 'y-select-indicator-separator',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorSeparator || {}),\n    displayName: 'YSelectIndicatorSeparator'\n});\n\nexport const ThemableYSelectIndicatorClearable  = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-indicator-clearable',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorClearable || {}),\n    displayName: 'YSelectIndicatorClearable'\n});\n\nexport const ThemableYSelectIndicatorClearableSVG = buildGenericThemableComponent({\n    Tag: 'svg',\n    componentClassName: 'y-select-indicator-dropdown-svg',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorClearableSVG || {}),\n    displayName: 'YSelectIndicatorDropdownSVG',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={clearablePath}></path>\n    })\n});\n\nexport const ThemableYSelectIndicatorDropdown = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-indicator-dropdown',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorDropdown || {}),\n    displayName: 'YSelectIndicatorDropdown'\n});\n\nexport const ThemableYSelectIndicatorDropdownSVG = buildGenericThemableComponent({\n    Tag: 'svg',\n    componentClassName: 'y-select-indicator-dropdown-svg',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorDropdownSVG || {}),\n    displayName: 'YSelectIndicatorDropdownSVG',\n    propMutator: () => ({\n        height: '20px',\n        width: '20px',\n        viewBox: '0 0 20 20',\n        'aria-hidden': true,\n        focusable: false,\n        children: <path d={dropdownPath}></path>\n    })\n});\n\n/**\n * MENU REGION\n */\n\nexport const ThemableYSelectMenu = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-menu',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menu || {}),\n    displayName: 'YSelectMenu'\n});\n\nexport const ThemableYSelectMenuList = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-menu-list',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuList || {}),\n    displayName: 'YSelectMenuList'\n});\n\nexport const ThemableYSelectMenuOption = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-menu-option',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuOption || {}),\n    displayName: 'YSelectMenuOption'\n});\n\nexport const ThemableYSelectMenuEmpty = buildGenericThemableComponent({\n    Tag: 'div',\n    componentClassName: 'y-select-menu-empty',\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuEmpty || {}),\n    displayName: 'YSelectMenuEmpty'\n});\n\n\nexport const ThemableYSelect = globalTheme => {\n    const Wrapper = ThemableYSelectWrapper(globalTheme);\n    const Stage = ThemableYSelectStage(globalTheme);\n\n    const ValueContainer = ThemableYSelectValueContainer(globalTheme);\n\n\n    const IndicatorContainer = ThemableYSelectIndicatorContainer(globalTheme);\n    const IndicatorSeparator = ThemableYSelectIndicatorSeparator(globalTheme);\n    const IndicatorClearable = ThemableYSelectIndicatorClearable(globalTheme);\n    const IndicatorClearableSVG = ThemableYSelectIndicatorClearableSVG(globalTheme);\n    const IndicatorDropdown = ThemableYSelectIndicatorDropdown(globalTheme);\n    const IndicatorDropdownSVG = ThemableYSelectIndicatorDropdownSVG(globalTheme);\n\n    const Menu = ThemableYSelectMenu(globalTheme);\n    const MenuList = ThemableYSelectMenuList(globalTheme);\n    const MenuOption = ThemableYSelectMenuOption(globalTheme);\n    const MenuEmpty = ThemableYSelectMenuEmpty(globalTheme);\n\n    class YSelectComponent extends React.Component {\n        constructor(props) {\n            super(props);\n            this.ref = React.createRef();\n            this.inputRef = React.createRef();\n            this.state = {\n                menuOpen: false,\n                selected: null,\n                searchString: ''\n            }\n        }\n\n        componentDidMount() {\n            document.addEventListener('mousedown', this.closeOnOutsideClick, false);\n        }\n\n        componentWillUnmount() {\n            document.removeEventListener('mousedown', this.closeOnOutsideClick, false);\n        }\n\n        closeOnOutsideClick = e => {\n            if(this.ref.current && !this.ref.current.contains(e.target) && this.state.menuOpen){\n                this.setState({menuOpen: false, searchString: ''}, () => this.inputRef.current && this.inputRef.current.blur());\n            }\n        };\n\n        toggleMenu = () => {\n            let exitState;\n            this.setState(\n                ({menuOpen, searchString, ...rest}) => Object.assign(\n                    {},\n                    rest,\n                    {\n                        menuOpen: exitState = !menuOpen,\n                        searchString: !menuOpen ? searchString : ''\n                    }\n                ),\n                () => this.inputRef.current && (exitState ? this.inputRef.current.focus() : this.inputRef.current.blur())\n        )};\n\n        selectableMenuOption = value => () => this.setState(\n            {menuOpen: false, selected: value, searchString: ''}, () => (this.props.onChange || (() => {}))(value));\n\n        clearSelection = () => this.setState({menuOpen: false, selected: null, searchString: ''}, () => (this.props.onChange || (() => {}))(null));\n        \n        onSearchStringChange = e => this.setState({searchString: e.target.value});\n\n        render() {\n            const {\n                options = [],\n                placeholder = 'Select...',\n                clearable = true,\n                searchable = true\n            } = this.props;\n\n            const menuOptions = options\n            .filter(({label}) => label.toLowerCase().includes(this.state.searchString.toLowerCase()))\n            .map(({value, label}, i) => (\n                <MenuOption \n                    className={value === this.state.selected ? 'selected' : ''}\n                    data-value={value} // I'm here for dev tool visibility\n                    onClick={this.selectableMenuOption(value)}\n                    key={`${value}-${i}`}\n                >\n                    {label}\n                </MenuOption>));\n\n            return (<Wrapper ref={this.ref}>\n                <Stage>\n                    <ValueContainer\n                        menuOpen={this.state.menuOpen}\n                        toggleMenu={this.toggleMenu}\n                        selected={this.state.selected}\n                        options={options}\n                        placeholder={placeholder}\n                        searchable={searchable}\n                        onChange={this.onSearchStringChange}\n                        searchString={this.state.searchString}\n                        ref={this.inputRef}\n                    />\n                    <IndicatorContainer>\n                        {clearable && <IndicatorClearable\n                            onClick={this.clearSelection}\n                        >\n                            <IndicatorClearableSVG/>\n                        </IndicatorClearable>\n                        }\n                        <IndicatorSeparator/>\n                        <IndicatorDropdown onClick={this.toggleMenu}>\n                            <IndicatorDropdownSVG/>\n                        </IndicatorDropdown>\n                    </IndicatorContainer>\n                </Stage>\n                {this.state.menuOpen && <Menu>\n                    <MenuList>\n                        {\n                            menuOptions.length\n                                ? menuOptions\n                                : <MenuEmpty>{options.length ? 'No options match' : 'No options'}</MenuEmpty>\n                        } {/* TODO NO OPTIONS INDICATOR */}\n                    </MenuList>\n                </Menu>}\n            </Wrapper>);\n        }\n    }\n    YSelectComponent.displayName = 'YSelect';\n    return YSelectComponent;\n}\n\nexport default ThemableYSelect();","export default \"import React from 'react';\\nimport { buildGenericThemableComponent } from '../../util.js';\\nimport {ThemableYSelectValueContainer} from './YSelectValueContainer.js';\\nimport {dropdownPath, clearablePath} from './YSelectSVGs.js';\\nimport './YSelectComponents.css';\\n\\n/**\\n * LAYOUT\\n */\\nexport const ThemableYSelectWrapper = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-wrapper',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).wrapper || {}),\\n    displayName: 'YSelectWrapper',\\n    forwardRef: true\\n});\\n\\nexport const ThemableYSelectStage = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-stage',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).stage || {}),\\n    displayName: 'YSelectStage'\\n});\\n\\n/**\\n * INDICATOR REGION\\n */\\n\\nexport const ThemableYSelectIndicatorContainer = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-indicator-container',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorContainer || {}),\\n    displayName: 'YSelectIndicatorContainer'\\n});\\n\\nexport const ThemableYSelectIndicatorSeparator = buildGenericThemableComponent({\\n    Tag: 'span',\\n    componentClassName: 'y-select-indicator-separator',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorSeparator || {}),\\n    displayName: 'YSelectIndicatorSeparator'\\n});\\n\\nexport const ThemableYSelectIndicatorClearable  = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-indicator-clearable',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorClearable || {}),\\n    displayName: 'YSelectIndicatorClearable'\\n});\\n\\nexport const ThemableYSelectIndicatorClearableSVG = buildGenericThemableComponent({\\n    Tag: 'svg',\\n    componentClassName: 'y-select-indicator-dropdown-svg',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorClearableSVG || {}),\\n    displayName: 'YSelectIndicatorDropdownSVG',\\n    propMutator: () => ({\\n        height: '20px',\\n        width: '20px',\\n        viewBox: '0 0 20 20',\\n        'aria-hidden': true,\\n        focusable: false,\\n        children: <path d={clearablePath}></path>\\n    })\\n});\\n\\nexport const ThemableYSelectIndicatorDropdown = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-indicator-dropdown',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorDropdown || {}),\\n    displayName: 'YSelectIndicatorDropdown'\\n});\\n\\nexport const ThemableYSelectIndicatorDropdownSVG = buildGenericThemableComponent({\\n    Tag: 'svg',\\n    componentClassName: 'y-select-indicator-dropdown-svg',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).indicatorDropdownSVG || {}),\\n    displayName: 'YSelectIndicatorDropdownSVG',\\n    propMutator: () => ({\\n        height: '20px',\\n        width: '20px',\\n        viewBox: '0 0 20 20',\\n        'aria-hidden': true,\\n        focusable: false,\\n        children: <path d={dropdownPath}></path>\\n    })\\n});\\n\\n/**\\n * MENU REGION\\n */\\n\\nexport const ThemableYSelectMenu = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-menu',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menu || {}),\\n    displayName: 'YSelectMenu'\\n});\\n\\nexport const ThemableYSelectMenuList = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-menu-list',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuList || {}),\\n    displayName: 'YSelectMenuList'\\n});\\n\\nexport const ThemableYSelectMenuOption = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-menu-option',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuOption || {}),\\n    displayName: 'YSelectMenuOption'\\n});\\n\\nexport const ThemableYSelectMenuEmpty = buildGenericThemableComponent({\\n    Tag: 'div',\\n    componentClassName: 'y-select-menu-empty',\\n    themeSelector: (globalTheme) => (((globalTheme.YBasic || {}).YSelect || {}).menuEmpty || {}),\\n    displayName: 'YSelectMenuEmpty'\\n});\\n\\n\\nexport const ThemableYSelect = globalTheme => {\\n    const Wrapper = ThemableYSelectWrapper(globalTheme);\\n    const Stage = ThemableYSelectStage(globalTheme);\\n\\n    const ValueContainer = ThemableYSelectValueContainer(globalTheme);\\n\\n\\n    const IndicatorContainer = ThemableYSelectIndicatorContainer(globalTheme);\\n    const IndicatorSeparator = ThemableYSelectIndicatorSeparator(globalTheme);\\n    const IndicatorClearable = ThemableYSelectIndicatorClearable(globalTheme);\\n    const IndicatorClearableSVG = ThemableYSelectIndicatorClearableSVG(globalTheme);\\n    const IndicatorDropdown = ThemableYSelectIndicatorDropdown(globalTheme);\\n    const IndicatorDropdownSVG = ThemableYSelectIndicatorDropdownSVG(globalTheme);\\n\\n    const Menu = ThemableYSelectMenu(globalTheme);\\n    const MenuList = ThemableYSelectMenuList(globalTheme);\\n    const MenuOption = ThemableYSelectMenuOption(globalTheme);\\n    const MenuEmpty = ThemableYSelectMenuEmpty(globalTheme);\\n\\n    class YSelectComponent extends React.Component {\\n        constructor(props) {\\n            super(props);\\n            this.ref = React.createRef();\\n            this.inputRef = React.createRef();\\n            this.state = {\\n                menuOpen: false,\\n                selected: null,\\n                searchString: ''\\n            }\\n        }\\n\\n        componentDidMount() {\\n            document.addEventListener('mousedown', this.closeOnOutsideClick, false);\\n        }\\n\\n        componentWillUnmount() {\\n            document.removeEventListener('mousedown', this.closeOnOutsideClick, false);\\n        }\\n\\n        closeOnOutsideClick = e => {\\n            if(this.ref.current && !this.ref.current.contains(e.target) && this.state.menuOpen){\\n                this.setState({menuOpen: false, searchString: ''}, () => this.inputRef.current && this.inputRef.current.blur());\\n            }\\n        };\\n\\n        toggleMenu = () => {\\n            let exitState;\\n            this.setState(\\n                ({menuOpen, searchString, ...rest}) => Object.assign(\\n                    {},\\n                    rest,\\n                    {\\n                        menuOpen: exitState = !menuOpen,\\n                        searchString: !menuOpen ? searchString : ''\\n                    }\\n                ),\\n                () => this.inputRef.current && (exitState ? this.inputRef.current.focus() : this.inputRef.current.blur())\\n        )};\\n\\n        selectableMenuOption = value => () => this.setState(\\n            {menuOpen: false, selected: value, searchString: ''}, () => (this.props.onChange || (() => {}))(value));\\n\\n        clearSelection = () => this.setState({menuOpen: false, selected: null, searchString: ''}, () => (this.props.onChange || (() => {}))(null));\\n        \\n        onSearchStringChange = e => this.setState({searchString: e.target.value});\\n\\n        render() {\\n            const {\\n                options = [],\\n                placeholder = 'Select...',\\n                clearable = true,\\n                searchable = true\\n            } = this.props;\\n\\n            const menuOptions = options\\n            .filter(({label}) => label.toLowerCase().includes(this.state.searchString.toLowerCase()))\\n            .map(({value, label}, i) => (\\n                <MenuOption \\n                    className={value === this.state.selected ? 'selected' : ''}\\n                    data-value={value} // I'm here for dev tool visibility\\n                    onClick={this.selectableMenuOption(value)}\\n                    key={`${value}-${i}`}\\n                >\\n                    {label}\\n                </MenuOption>));\\n\\n            return (<Wrapper ref={this.ref}>\\n                <Stage>\\n                    <ValueContainer\\n                        menuOpen={this.state.menuOpen}\\n                        toggleMenu={this.toggleMenu}\\n                        selected={this.state.selected}\\n                        options={options}\\n                        placeholder={placeholder}\\n                        searchable={searchable}\\n                        onChange={this.onSearchStringChange}\\n                        searchString={this.state.searchString}\\n                        ref={this.inputRef}\\n                    />\\n                    <IndicatorContainer>\\n                        {clearable && <IndicatorClearable\\n                            onClick={this.clearSelection}\\n                        >\\n                            <IndicatorClearableSVG/>\\n                        </IndicatorClearable>\\n                        }\\n                        <IndicatorSeparator/>\\n                        <IndicatorDropdown onClick={this.toggleMenu}>\\n                            <IndicatorDropdownSVG/>\\n                        </IndicatorDropdown>\\n                    </IndicatorContainer>\\n                </Stage>\\n                {this.state.menuOpen && <Menu>\\n                    <MenuList>\\n                        {\\n                            menuOptions.length\\n                                ? menuOptions\\n                                : <MenuEmpty>{options.length ? 'No options match' : 'No options'}</MenuEmpty>\\n                        } {/* TODO NO OPTIONS INDICATOR */}\\n                    </MenuList>\\n                </Menu>}\\n            </Wrapper>);\\n        }\\n    }\\n    YSelectComponent.displayName = 'YSelect';\\n    return YSelectComponent;\\n}\\n\\nexport default ThemableYSelect();\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { State, Observe } from \"mdx-observable\";\nimport YSelect from './src/YBasic/YSelectComponents/YSelectComponents.js';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/YBasic/YSelectComponents/YSelectComponents.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"yselectcomponents\"\n    }}>{`YSelectComponents`}</h1>\n    <h2 {...{\n      \"id\": \"single-select\"\n    }}>{`Single Select`}</h2>\n    <Playground __position={0} __code={'<YSelect\\n  clearable={true || \\'default\\'}\\n  placeholder={\\'Select...\\' || \\'default\\'}\\n  searchable={true || \\'default\\'}\\n  options={Array(200)\\n    .fill()\\n    .map((_, i) => ({\\n      value: i,\\n      label: `${i % 2 == 0 ? \\'B\\' : \\'Z\\'}${(i * 7) % 3 == 0 ? \\'ee\\' : \\'oo\\'}${\\n        i % 3 == 0 ? \\'p\\' : i % 3 == 1 ? \\'m\\' : \\'k\\'\\n      }`,\\n    }))}\\n  onChange={\\n    value => alert(`Id ${value} selected!`)\\n    //() => {} // disable alert\\n  }\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      State,\n      Observe,\n      YSelect,\n      SourceDisplay,\n      source\n    }} mdxType=\"Playground\">\n      <YSelect clearable={true || 'default'} placeholder={'Select...' || 'default'} searchable={true || 'default'} options={Array(200).fill().map((_, i) => ({\n        value: i,\n        label: `${i % 2 == 0 ? 'B' : 'Z'}${i * 7 % 3 == 0 ? 'ee' : 'oo'}${i % 3 == 0 ? 'p' : i % 3 == 1 ? 'm' : 'k'}`\n      }))} onChange={value => alert(`Id ${value} selected!`) //() => {} // disable alert\n      } mdxType=\"YSelect\" />\n    </Playground>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}