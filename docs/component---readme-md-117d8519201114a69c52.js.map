{"version":3,"sources":["webpack:///../README.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mcAMO,IAAMA,EAAe,Q,0JAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,yDACA,4BAAW,0BAAYC,WAAW,KAAvB,cAAX,yCACA,4BAAW,0BAAYA,WAAW,KAAvB,cAAX,yDACA,4BAAW,0BAAYA,WAAW,KAAvB,cAAX,2DACA,sCAAqB,mBAAGA,WAAW,KAAQ,CACvC,KAAQ,6CADS,6CAGrB,uCAAsB,mBAAGA,WAAW,KAAQ,CACxC,KAAQ,6CADU,6CAGtB,6DACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,koCAyCL,8BACA,uBAAK,sBAAMA,WAAW,OAAU,IAA3B,4KAEL,wE,iJAKJJ,EAAWK,gBAAiB","file":"component---readme-md-117d8519201114a69c52.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"yeet-components\"\n    }}>{`yeet-components`}</h1>\n    <p>{`some basic styled components WIP`}</p>\n    <p>{`run `}<inlineCode parentName=\"p\">{`yarn start`}</inlineCode>{` to get a dev server with the widgets`}</p>\n    <p>{`run `}<inlineCode parentName=\"p\">{`yarn build`}</inlineCode>{` to build static docs that are hosted on github pages`}</p>\n    <p>{`run `}<inlineCode parentName=\"p\">{`./start.sh`}</inlineCode>{` if your dang path is messed up and docz isn't in scope`}</p>\n    <p>{`github pages: `}<a parentName=\"p\" {...{\n        \"href\": \"https://hstom.github.io/yeet-components/\"\n      }}>{`https://hstom.github.io/yeet-components/`}</a></p>\n    <p>{`github source: `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/hstom/yeet-components\"\n      }}>{`https://github.com/hstom/yeet-components`}</a></p>\n    <p>{`95% of the entire thing is just this`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export const buildGenericThemableComponent = ({\n    Tag = 'div',\n    componentClassName = '',\n    themeSelector = () => { },\n    displayName='YComponent'\n    // TODO: add prop munger for ease of use\n}) => {\n    return (globalTheme = {}) => {\n        const {\n            defaultStyle = {},\n            defaultClassName = '',\n            excludeComponentDefaultClassName = false,\n        } = themeSelector(globalTheme);\n\n        const Component = ({\n            style = {},\n            className,\n\n            children,\n            ...props\n        }) => {\n            return (\n                <Tag\n                    className={catClassName(\n                        (excludeComponentDefaultClassName ? '' : \\`y \\${componentClassName}\\`),\n                        defaultClassName,\n                        className\n                    )}\n                    style={Object.assign({}, defaultStyle, style)}\n                    {...props}\n                >\n                    {children}\n                </Tag>\n            );\n        }\n        Component.displayName = displayName;\n        return Component;\n\n    }\n}\n`}</code></pre>\n    <p>{`e.g. `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const themableSection = buildGenericThemableComponent({Tag:'section', componentClassName:'y-section', g=>((g.YBasic || {}).YSection || {}), displayName:'YSection'});\n`}</code></pre>\n    <p>{`then churn out some css targeting .y.y-section`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}