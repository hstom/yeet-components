{"version":3,"sources":["webpack:///../src/util.js?1e86","webpack:///../util.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","SourceDisplay","source","isMDXComponent"],"mappings":"gLAAe,kiL,oSCSR,IAAMA,EAAe,Q,yJAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,UADR,WAGA,8FACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,iGACA,iBAAQ,CACN,GAAM,iCADR,iCAGA,uHACA,iBAAQ,CACN,GAAM,yCADR,yCAGA,gFACA,iBAAQ,CACN,GAAM,UADR,UAGA,YAACC,EAAA,EAAD,CAAeC,OAAQA,EAAQF,QAAQ,mB,gJAK3CH,EAAWM,gBAAiB","file":"component---util-mdx-560e528b2d765192c795.js","sourcesContent":["export default \"import React, {useEffect, useContext} from 'react';\\nexport const catClassName = (...classNames) => {\\n    return [].concat.apply([],\\n        classNames.map((className = '') => Array.from(new Set(className.split(' ').filter(z => !!z))))\\n    ).join(' ');\\n};\\n\\nexport const mergeRefs = (...refs) => (elem) => {\\n    refs.forEach(ref => {\\n        if(typeof ref === 'function') {\\n            ref(elem);\\n        } else {\\n            ref.current = elem;\\n        }\\n    });\\n}\\n\\nexport const useClickOutsideHandler = (nodeRef, onOutsideClick) => {\\n    const handleClick = e => {\\n        if(nodeRef.current && !nodeRef.current.contains(e.target)) {\\n            onOutsideClick(e);\\n        }\\n    }\\n    useEffect(() => {\\n        document.addEventListener('mousedown', handleClick, false);\\n        return () => {\\n            document.removeEventListener('mousedown', handleClick, false);\\n        }\\n    })\\n}\\n\\nexport const YThemeContext = React.createContext();\\n\\nexport const buildGenericThemableComponent = ({\\n    Tag = 'div',\\n    componentClassName = '',\\n    themeSelector = () => { },\\n    displayName='YComponent',\\n    propMutator = props => props,\\n    forwardRef = false\\n}) => {\\n    if(forwardRef) { // will hang if inlined... why?\\n        const Component = (preProps) => {\\n            const {\\n                style = {},\\n                className,\\n    \\n                children,\\n                forwardedRef,\\n                ...props\\n            } = propMutator(preProps);\\n\\n            const {\\n                defaultStyle = {},\\n                defaultClassName = '',\\n                excludeComponentDefaultClassName = false,\\n            } = themeSelector(useContext(YThemeContext) || {}); // TODO memo\\n\\n            return (\\n                <Tag\\n                    className={catClassName(\\n                        (excludeComponentDefaultClassName ? '' : `y ${componentClassName}`),\\n                        defaultClassName,\\n                        className\\n                    )}\\n                    style={Object.assign({}, defaultStyle, style)}\\n                    {...props}\\n                    ref={forwardedRef}\\n                >\\n                    {children}\\n                </Tag>\\n            );\\n        }\\n        Component.displayName = displayName;\\n        return React.forwardRef((props, ref) => {\\n            return <Component {...props} forwardedRef={ref} />;\\n        });\\n    }\\n\\n    const Component = (preProps) => {\\n        const {\\n            style = {},\\n            className,\\n\\n            children,\\n            ...props\\n        } = propMutator(preProps);\\n\\n        const {\\n            defaultStyle = {},\\n            defaultClassName = '',\\n            excludeComponentDefaultClassName = false,\\n        } = themeSelector(useContext(YThemeContext) || {}); // TODO memo\\n        \\n        return (\\n            <Tag\\n                className={catClassName(\\n                    (excludeComponentDefaultClassName ? '' : `y ${componentClassName}`),\\n                    defaultClassName,\\n                    className\\n                )}\\n                style={Object.assign({}, defaultStyle, style)}\\n                {...props}\\n            >\\n                {children}\\n            </Tag>\\n        );\\n    }\\n    Component.displayName = displayName;\\n    return Component;\\n\\n}\\n\\n//const camelCase = spacedString => spacedString.split(' ').map((word, i) => (i === 0 ? word[0].toLowerCase() : word[0].toUpperCase()) + word.slice(1).toLowerCase()).join('');\\nconst pascalCase = spacedString => spacedString.split(' ').map((word) => word[0].toUpperCase() + word.slice(1).toLowerCase()).join('');\\nconst kebabCase = spacedString => {\\n    \\n    const result = spacedString.split(' ').map((word, i) => (i === 0 ? '' : '-') + word.toLowerCase()).join('');\\n    if(result.includes('undefined')) {\\n        debugger;\\n    }\\n    return result;\\n}\\n\\n/**\\n * Build a themable component with default class names and display names\\n */\\nexport const buildSimpleGenericThemableComponent = (\\n    suffix,\\n    {\\n        Tag = 'div',\\n        themeSelector = theme => theme,\\n        propMutator = props => props,\\n        forwardRef = false,\\n        displayName = pascalCase(suffix),\\n        extraClassNames = []\\n    } = {}\\n    ) => buildGenericThemableComponent({\\n        Tag,\\n        componentClassName: `${kebabCase(suffix)}${extraClassNames.length > 0 ? ' ' : ''}${extraClassNames.join(' ')}`,\\n        themeSelector,\\n        displayName,\\n        propMutator,\\n        forwardRef\\n});\\n\\n/**\\n * Build a themable subcomponent builder:\\n *   bake in a prefix and then you can just add a suffix for easy themable subcomponents\\n */\\nexport const getGenericThemableSubcomponentBuilder = (prefix, baseThemeSelector) => (\\n    suffix = '',\\n    {\\n        Tag = 'div',\\n        themeSelector: subThemeSelector = (theme) => theme,\\n        propMutator = props => props,\\n        forwardRef = false,\\n        noPrefix = false,\\n        extraClassNames = [],\\n        displayName\\n    } = {}\\n    ) => buildSimpleGenericThemableComponent(\\n        `${noPrefix ? '' : prefix}${(suffix !== '' && !noPrefix) ? ' ' : ''}${suffix}`,\\n        {\\n            Tag,\\n            themeSelector: suffix === ''\\n                ? (globalTheme => baseThemeSelector(globalTheme) || {})\\n                : (globalTheme => subThemeSelector(baseThemeSelector(globalTheme || {}) || {}) || {}),\\n            propMutator,\\n            forwardRef,\\n            displayName,\\n            extraClassNames\\n        }\\n);\\n\\nexport default {\\n    catClassName,\\n    buildGenericThemableComponent\\n}\"","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/thomas.coladonato/yeet-components/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport SourceDisplay from './SourceDisplay';\nimport source from '!!raw-loader!./src/util.js';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"utiljs\"\n    }}>{`util.js`}</h1>\n    <p>{`to avoid non react dependencies, these are just in a little util file`}</p>\n    <h2 {...{\n      \"id\": \"catclassname\"\n    }}>{`catClassName`}</h2>\n    <p>{`split arbitrary number of className strings on space, dedupe, space join`}</p>\n    <h2 {...{\n      \"id\": \"buildgenericthemablecomponent\"\n    }}>{`buildGenericThemableComponent`}</h2>\n    <p>{`with input of {tag, className, and themeSelector, and propMutator} build themable basic widget`}</p>\n    <h2 {...{\n      \"id\": \"getgenericthemablesubcomponentbuilder\"\n    }}>{`getGenericThemableSubcomponentBuilder`}</h2>\n    <p>{`bootstrap a subcomponent for use in a complex component`}</p>\n    <h1 {...{\n      \"id\": \"source\"\n    }}>{`Source`}</h1>\n    <SourceDisplay source={source} mdxType=\"SourceDisplay\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}